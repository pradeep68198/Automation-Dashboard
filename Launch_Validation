package com.hive.Scripts;

import java.io.File;
import java.io.FileInputStream;

import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import org.testng.Assert;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.google.common.base.Strings;
import com.hive.utilities.Driver_Wrapper;
import com.hive.utilities.General_Wrapper;

public class Launch_Validation extends Driver_Wrapper{
	

  @Test(priority=1,description = "Validating Source and Target tables")
  @Parameters({"Validation","target_name"})
 
  public void Validation_Begin(String Validation,String target_name) throws Exception {
	  
	  Properties prop = new Properties();
	  InputStream ip = new FileInputStream("Input_File.properties");
	  prop.load(ip);
	  
	  Username=prop.getProperty("Username");
	  pwd=prop.getProperty("pwd");
	  Excel_Path=prop.getProperty("Excel_Path")+target_name+".xlsx";
	  Sheet_Name=prop.getProperty("Excel_Sheet");
	  Target_Table_Name=target_name;
	  Result_File=Result_Path+target_name+".xlsx";
	  
	  if(Validation.contains("Mainframe_job")) {
		  Job_ID=target_name;
		  Mainframe_exe();
		  Assert.assertEquals("Pass",Mainframe_Status);
		  
	  }
	  
	  else {
	  if(!(File_Exists(Result_File))){
		  
		    mydata=General_Wrapper.readXLSX(Excel_Path,Sheet_Name);
		    Create_workbook_Sheets();
			fh = new FileHandler(Result_Path+"MyLogFile.log");
			logger = Logger.getLogger("MyLog");
			logger.addHandler(fh);
			logger.setUseParentHandlers(false);
	        formatter = new SimpleFormatter();
	        fh.setFormatter(formatter);
	        Hive_HDBC();
	        logger.info("***********************************");
	        logger.info("*      Execution Begins           *");
	        logger.info("***********************************");
				
				 logger.info("***********************************");
			     logger.info("*  Query Execution Started   *");
			     logger.info("***********************************");
			
			     Temp_Src_Query=mydata[2][1].split(";");
			     Temp_Tgt_Query=mydata[3][1].split(";");
			     
			     int  src_len=Temp_Src_Query.length;
			     int  tgt_len=Temp_Tgt_Query.length;
			     
			     System.out.println("Source lenght "+src_len);
			     System.out.println("Target lenght "+tgt_len);
			     
			     stmt.execute("set hive.execution.engine=tez");
			     
			     if(Temp_Src_Query.length==1) {
			    	 Src_Query=Temp_Src_Query[0];
			     }
			     
			     else {
			    	 Src_Query=Temp_Src_Query[src_len-1];
			    
			    	 for(int l=0;l<src_len-1;l++) {
			    		 stmt.execute(Temp_Src_Query[l]);
			    	 }
			     }
			     
			     if(Temp_Tgt_Query.length==1) {
			    	 Tgt_Query=Temp_Tgt_Query[0];
			     }
			     
			     else {
			    	 Tgt_Query=Temp_Tgt_Query[tgt_len-1];
                      for(int l=0;l<tgt_len-1;l++) {
                    	  stmt.execute(Temp_Tgt_Query[l]);
			    	 }
			     }
				Key_Column=mydata[4][1];
				Key_Value_Split();
				Src_Column_name();
				Tgt_Column_name();
				Target_TB =mydata[1][1];	
				if(Strings.isNullOrEmpty(mydata[5][1])){
					Add_Key="No Value";
				}
				else{
				Add_Key=mydata[5][1];
				}
				
			
				Count_Validation();
			    Data_Validation();	
				SRC_Missing();
				TGT_Missing();
				TGT_Duplicate();
				SRC_Duplicate();
				Count_Report();
				Summary_sheet();
				Hive_HDBC_Close();
				 logger.info("* HIVE Connection Closed *");
				
				logger.info("***********************************");
			    logger.info("*  Query Execution Ends      *");
			    logger.info("***********************************");
					
			
			
		
			System.out.println("Completed");
			logger.info("***********************************");
	        logger.info("*      Execution Ends           *");
	        logger.info("***********************************");
		  
		  
	  }
	  }
		  
	  
	
	       if(!(Validation.contains("Mainframe_job"))) {
	         
	        String[][] Result_data=General_Wrapper.readXLSX(Result_File,Summary);
	        
	        for(int i=1;i<Result_data[0].length;i++){
	        	
	        	if(Validation.contains(Result_data[0][i])) {
	        	 
	        if(Validation.contains("Count_Validation")){
	        	
	        	
	        	 
	        	if(!(Result_data[3][i].equalsIgnoreCase("No Value"))){
	        		
	        		if((Validation.contains(Result_data[3][i])) && (target_name.contains(Result_data[2][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        	}
	        	else {
	        		
	        		if((target_name.contains(Result_data[2][i]))){
	        			 
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        		
	        	}
	        	
	        }
	        
	        
	        if(Validation.contains("Data_Mismatch")){
	        	if(!(Result_data[3][i].equalsIgnoreCase("No Value"))){
	        		
	        		if((Validation.contains(Result_data[3][i])) && (Validation.contains(Result_data[1][i])) && (target_name.contains(Result_data[2][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        	}
	        	else {
	        		
	        		if((target_name.contains(Result_data[2][i])) && (Validation.contains(Result_data[1][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        		
	        	}
	        	
	        }
	        
	        
	        if(Validation.contains("Source_Missing_Validation")){
	        	 
	        	if(!(Result_data[3][i].equalsIgnoreCase("No Value"))){
	        		
	        		if((Validation.contains(Result_data[3][i])) && (target_name.contains(Result_data[2][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        	}
	        	else {
	        		
	        		if((target_name.contains(Result_data[2][i]))){
	        			 
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        		
	        	}
	        	
	        }
	        
	        if(Validation.contains("Target_Missing_Validation")){
	        	 
	        	if(!(Result_data[3][i].equalsIgnoreCase("No Value"))){
	        		
	        		if((Validation.contains(Result_data[3][i])) && (target_name.contains(Result_data[2][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        	}
	        	else {
	        		
	        		if((target_name.contains(Result_data[2][i]))){
	        			 
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        		
	        	}
	        	
	        }
	        
	        if(Validation.contains("Duplicate_Validation")){
	        	 
	        	if(!(Result_data[3][i].equalsIgnoreCase("No Value"))){
	        		
	        		if((Validation.contains(Result_data[3][i])) && (target_name.contains(Result_data[2][i]))){
	        			
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        	}
	        	else {
	        		
	        		if((target_name.contains(Result_data[2][i]))){
	        			 
	        			   Assert.assertEquals("Pass",Result_data[4][i]);
	    				   break;
	        			
	        		}
	        		
	        	}
	        	
	        }
	        
	        
	        
	        
	        
	        
	        	}
	        }
	        
	        
	       }
	    
	       
	   
	      
	  
  }
}
