package com.Page.Compare;


import java.awt.image.BufferedImage;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import java.io.IOException;


import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.DataFormatter;

import org.apache.poi.util.Units;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.BreakType;

import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Reporter;

import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.screentaker.ViewportPastingStrategy;

public class Utility1 {

	WebDriver driver;

	public String[][] readXLSXFile(String Filepath,String sheet) throws IOException {
			
			File excel = new File(Filepath);
			FileInputStream fis = new FileInputStream(excel);
			String value=null;
			XSSFWorkbook workbook= new XSSFWorkbook(fis);
			XSSFSheet ws = workbook.getSheet(sheet);
			XSSFCell cell;
			
			DataFormatter formatter = new DataFormatter();
			int rowNum = ws.getLastRowNum()+1;
	      int colNum = ws.getRow(0).getLastCellNum();
	     
			  String[][] parameterarray = new String[(colNum)][rowNum];
			  for (int i = 1; i < rowNum; i++) {
				  XSSFRow row = ws.getRow(i);
				  for (int j = 0; j < colNum; j++) {
					  
					  cell = row.getCell(j);
					
					 
					  if(!(cell==null)){
						  
						  
						 
						 value = formatter.formatCellValue(cell);
					  }
					  else{
						  value = null; 
					  }
	               
	                
	                parameterarray[j][i] = value;
	              
				  }
				  
			  }
			  workbook.close();
			  return parameterarray;
			
		}

	public String WriteXLSXFile(String Filepath,String sheet,String Value,int col,int row) throws IOException {
		
		String val=Value;
		
		 String mainSheet = sheet;
		
		 FileInputStream file = new FileInputStream(Filepath);
	     XSSFWorkbook wb = new XSSFWorkbook(file);
	     XSSFSheet sheet1 = wb.getSheet(mainSheet);
	     sheet1.getRow(row).createCell(col).setCellValue(val);
	     file.close();
	     FileOutputStream fileOut = new FileOutputStream(Filepath);
	     wb.write(fileOut);
	     wb.close();
	     
		    fileOut.flush();
		   
		   fileOut.close();
		
		  return val;
		
	}

	public double Compare(String Path1,String Path2) throws IOException {
		
	    BufferedImage img1 = null;
	    BufferedImage img2 = null;
	    double p;
	      File url1 = new File(Path1);
	      File url2 = new File(Path2);
	   
	      img1 = ImageIO.read(url1);
	      
	      img2 = ImageIO.read(url2);
	     
	  
	    int width1 = img1.getWidth(null);
	    int width2 = img2.getWidth(null);
	    int height1 = img1.getHeight(null);
	    int height2 = img2.getHeight(null);
	    System.out.println("width1 :"+width1);
	    System.out.println("height1 :"+height1);
	    System.out.println("width2 :"+width2);
	    System.out.println("height2 :"+height2);
	    if ((width1 != width2) || (height1 != height2)) {
	      System.err.println("Error: Images dimensions mismatch");
	     
	      p=9999.9;
	    }
	    else{
	    long diff = 0;
	    for (int y = 0; y < height1; y++) {
	      for (int x = 0; x < width1; x++) {
	        int rgb1 = img1.getRGB(x, y);
	        int rgb2 = img2.getRGB(x, y);
	        int r1 = (rgb1 >> 16) & 0xff;
	        int g1 = (rgb1 >>  8) & 0xff;
	        int b1 = (rgb1      ) & 0xff;
	        int r2 = (rgb2 >> 16) & 0xff;
	        int g2 = (rgb2 >>  8) & 0xff;
	        int b2 = (rgb2      ) & 0xff;
	        diff += Math.abs(r1 - r2);
	        diff += Math.abs(g1 - g2);
	        diff += Math.abs(b1 - b2);
	      }
	    }
	    
	    double n = width1 * height1 * 3;
	    p = diff / n / 255.0;
	    System.out.println("diff percent: " + (p * 100.0));
	    }
	return p;
	}

	
	public BufferedImage Get_diff(String Path1,String Path2) throws IOException {
		
	    BufferedImage img1 = null;
	    BufferedImage img2 = null;
	    
	   
	      File url1 = new File(Path1);
	      File url2 = new File(Path2);
	     
	  
	      img1 = ImageIO.read(url1);
	      
	      img2 = ImageIO.read(url2);
	      
	  
	    int width1 = img1.getWidth(null);
	    int width2 = img2.getWidth(null);
	    int height1 = img1.getHeight(null);
	    int height2 = img2.getHeight(null);
	    BufferedImage img3=new BufferedImage(width1,height1,BufferedImage.TYPE_INT_RGB);
	    if ((width1 != width2) || (height1 != height2)) {
	      System.err.println("Error: Images dimensions mismatch");
	     
	    }
	    else{
	    long diff = 0;
	    int result;
	    for (int y = 0; y < height1; y++) {
	      for (int x = 0; x < width1; x++) {
	        int rgb1 = img1.getRGB(x, y);
	        int rgb2 = img2.getRGB(x, y);
	        int r1 = (rgb1 >> 16) & 0xff;
	        int g1 = (rgb1 >>  8) & 0xff;
	        int b1 = (rgb1      ) & 0xff;
	        int r2 = (rgb2 >> 16) & 0xff;
	        int g2 = (rgb2 >>  8) & 0xff;
	        int b2 = (rgb2      ) & 0xff;
	        diff += Math.abs(r1 - r2);
	        diff += Math.abs(g1 - g2);
	        diff += Math.abs(b1 - b2);
	        diff /=3;
	        result=(int) ((diff<<16) | (diff<<8) | diff);
	        img3.setRGB(x, y, result);
	        
	      }
	    }
	    
	    }
	return img3;
	}

	public void Screenshot(WebDriver driver,String name,String Path) throws IOException{
		this.driver=driver;
		File scrfile=(File)((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		FileUtils.copyFile(scrfile, new File(Path+name+".png"));
	} 

	public void Screenshot_Chrome(WebDriver driver,String name,String Path) throws IOException{
		this.driver=driver;
		 final Screenshot screenshot = new AShot().shootingStrategy(
	             new ViewportPastingStrategy(2000)).takeScreenshot(driver);
	     final BufferedImage image = screenshot.getImage();
	     ImageIO.write(image, "PNG", new File(Path+name+".png"));
	     
	}
 
	public void Screenshot_IE(WebDriver driver,String name,String Path) throws IOException{
		this.driver=driver;
		 final Screenshot screenshot = new AShot().takeScreenshot(driver);
	     final BufferedImage image = screenshot.getImage();
	     ImageIO.write(image, "PNG", new File(Path+name+".png"));
	     
	}


	public void log(String text, Boolean addReport) {
	    
		
	    if (addReport) {
	        final String ESCAPE_PROPERTY = "org.uncommons.reportng.escape-output";
	        System.setProperty(ESCAPE_PROPERTY, "false");
	        Reporter.log(text);
	    } else {
	        
	    }
	}

	public void Fail_Log(String name,String path) throws IOException {
		
		String color="red";
		
		log("<b><font color="+color+">"+name+"</font></b><br>", true);
		 log("<a href=\""
	             + path + ".png\"><img src=\""
	             + path +".png \" alt=\"\""
	             + "height='100' width='100'/> " + "<br></a> ", true);
	}

	public void Pass_Log(String name) throws IOException {
		
		String color="green";
		
		log("<b><font color="+color+">"+name+"</font></b><br>", true);
	}

	public void Warning_Log(String name) throws IOException {
		
		String color="purple";
		
		log("<b><font color="+color+">"+name+"</font></b><br>", true);
	}
	
public void URL_Log(String name) throws IOException {
		
		String color="blue";
		
		log("<b><font color="+color+">"+name+"</font></b><br>", true);
	}
public void Index_Log(String name) throws IOException {
	
	String color="Black";
	
	log("<br><font color="+color+">"+name+"</font><br>", true);
}


//Create Word
public void createWord(String Path, String name,String Link1,String Link2,String Img1_path,String Img2_path,String Img3_path) throws IOException, InvalidFormatException {
   
        //Blank Document
        XWPFDocument doc = new XWPFDocument();
        //Write the Document in file system
       
        //create Paragraph
        XWPFParagraph paragraph = doc.createParagraph();
        XWPFRun run = paragraph.createRun();
        run.setText("Link Index :"+name+"\n");
        run.addBreak();  
        run.setText("Old URL  :"+Link1+"\n");
        run.addBreak();  
        run.setText("New URL  :"+Link2+"\n");
        run.addBreak();  
        run.setText("Old Image \n");
        run.addBreak();  
        FileInputStream pic = new FileInputStream(Img1_path);
        run.addPicture(pic,XWPFDocument.PICTURE_TYPE_JPEG,Img1_path, Units.toEMU(500), Units.toEMU(500));
        pic.close();
        run.addBreak();  
        run.setText("New Image \n");
        run.addBreak(BreakType.PAGE);  
        FileInputStream pic1 = new FileInputStream(Img2_path);
        //byte [] picbytes1 = IOUtils.toByteArray(pic1);
        //doc.addPictureData(picbytes1, Document.PICTURE_TYPE_PNG);
        run.addPicture(pic1,XWPFDocument.PICTURE_TYPE_JPEG,Img2_path, Units.toEMU(500), Units.toEMU(500)); 
        pic1.close();
        run.addBreak();  
        run.setText("Compare Image \n");
        run.addBreak();  
        FileInputStream pic2 = new FileInputStream(Img3_path);
        //byte [] picbytes2 = IOUtils.toByteArray(pic2);
        //doc.addPictureData(picbytes2, Document.PICTURE_TYPE_PNG);
        run.addPicture(pic2,XWPFDocument.PICTURE_TYPE_JPEG,Img3_path, Units.toEMU(500), Units.toEMU(500));
        pic2.close();
        FileOutputStream out = new FileOutputStream(
                new File(Path+name+".docx"));

        doc.write(out);
       
        //Close document
        out.close();
        
        System.out.println("createdWord written successfully");
    
}

public static String[][] getInputData(String fileName, String sheetName) {

    String[][] data = null;

    try {

         FileInputStream fis = new FileInputStream(new File(fileName));// ("./data/"+dataSheetName+".xlsx"));
         XSSFWorkbook workbook = new XSSFWorkbook(fis);

         XSSFSheet sheet = workbook.getSheet(sheetName);
         
         int rowCount = sheet.getLastRowNum();

         // get the number of columns
         int columnCount = sheet.getRow(0).getLastCellNum();
         data = new String[rowCount][columnCount];

         // loop through the rows
         for (int i = 1; i < rowCount + 1; i++) {
              try {
                    XSSFRow row = sheet.getRow(i);
                    for (int j = 0; j < columnCount; j++) { // loop through the
                                                                         // columns
                         try {
                              String cellValue = "";
                              try {
                                    cellValue = row.getCell(j).getStringCellValue();
                              } catch (NullPointerException e) {

                              }

                              data[i - 1][j] = cellValue; // add to the data array
                         } catch (Exception e) {
                              e.printStackTrace();
                         }
                    }

              } catch (Exception e) {
                    e.printStackTrace();
              }
         }
         fis.close();

    } catch (Exception e) {
         e.printStackTrace();
    }

    return data;

}





	}

