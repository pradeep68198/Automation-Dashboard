package com.report.validation;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;

import javax.swing.JOptionPane;

import org.apache.commons.configuration2.ex.ConfigurationException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.google.common.base.Strings;
import com.report.utilities.General_Wrapper;

import jxl.read.biff.BiffException;

public class HEDIS_Member_Detail extends General_Wrapper {
	
	public static String NCQA_Year;
	public static String Measure_Group;
	public static String Service_End_Date;
	public static String Line_of_Business;
	public static String Product_Category_Code;
	public static String Plan_Carrier_ID;
	public static String Plan_Arrangement_ID;
	public static String Include_Member_Ids;
	public static String BPS_Code;
	public static String CMS_Contract_ID;
	public static String Group_Control;
	public static String Member_State;
	public static String Network_Service_Area;
	public static String Plan_Sponsor_Unique;
	public static String Coventry_Enroll_Location;
	public static String HIOS_issuer_Code;
	public static String Coventry_Super_Group_Number;
	public static String Coventry_member_Group_Code;
	public static String Population_ID;
	public static String PBP_ID;
	public static String Funding_Category;
	public static String Product_Line;
	public static String Suffix_Location;
	public static String Account;
	public static String HIOS_Variant_Code;
	public static String HIOS_Plan_ID;
	public static String HIOS_State_Code;
	public static String Metallic_Level_Code;
	public static String Coventry_Plan_Code;
	public static String Contract_Situs_INN_Code;
	public static String Medicare_Primary_Code;

	public static String Actual_Report_Path;
	public static String REQUEST_INSTANCE_ID;
	public  ArrayList<String> Service_B_Query_Result = new ArrayList();
	public String[] Service_B_Result_Convert;
    public static int Column_Count;
    public static int Record_Count;
    public static String[] Record_Convert ;
    public static  String[][] Record_Array;
    public static  String[][] Actual_Data_Temp;
   
    public int row_line=0;
    
	public void Caller() throws ClassNotFoundException, SQLException, IOException, ConfigurationException, BiffException, ParseException, InterruptedException{
		
		Properties prop = new Properties();
		InputStream input = new FileInputStream(Param_Path);
		prop.load(input);
		
		NCQA_Year=prop.getProperty("NCQA_Year");
		Measure_Group=prop.getProperty("Measure_Group");
		Service_End_Date=prop.getProperty("Service_End_Date");
		Line_of_Business=prop.getProperty("Line_of_Business");
		Product_Category_Code=prop.getProperty("Product_Category_Code");
		Plan_Carrier_ID=prop.getProperty("Plan_Carrier_ID");
		Plan_Arrangement_ID=prop.getProperty("Plan_Arrangement_ID");
		
		Include_Member_Ids=prop.getProperty("Include_Member_Ids");
		BPS_Code=prop.getProperty("BPS_Code");
		CMS_Contract_ID=prop.getProperty("CMS_Contract_ID");
		Group_Control=prop.getProperty("Group_Control");
		Member_State=prop.getProperty("Member_State");
		Network_Service_Area=prop.getProperty("Network_Service_Area");
		Plan_Sponsor_Unique=prop.getProperty("Plan_Sponsor_Unique");
		
		Coventry_Enroll_Location=prop.getProperty("Coventry_Enroll_Location");
		HIOS_issuer_Code=prop.getProperty("HIOS_issuer_Code");
		Coventry_Super_Group_Number=prop.getProperty("Coventry_Super_Group_Number");
		Coventry_member_Group_Code=prop.getProperty("Coventry_member_Group_Code");
		
		Population_ID=prop.getProperty("Population_ID");
		PBP_ID=prop.getProperty("PBP_ID");
		Funding_Category=prop.getProperty("Funding_Category");
		Product_Line=prop.getProperty("Product_Line");
		Suffix_Location=prop.getProperty("Suffix_Location");
		Account=prop.getProperty("Account");
		HIOS_Variant_Code=prop.getProperty("HIOS_Variant_Code");
		
		HIOS_Plan_ID=prop.getProperty("HIOS_Plan_ID");
		HIOS_State_Code=prop.getProperty("HIOS_State_Code");
		Metallic_Level_Code=prop.getProperty("Metallic_Level_Code");
		Coventry_Plan_Code=prop.getProperty("Coventry_Plan_Code");
		Contract_Situs_INN_Code=prop.getProperty("Contract_Situs_INN_Code");
		Medicare_Primary_Code=prop.getProperty("Medicare_Primary_Code");
		Actual_Report_Path=prop.getProperty("Actual_Report_Path");
		
        Result_File_Path=prop.getProperty("Result_File")+formatter2.format(new Date())+"\\";
		 
		 File file=new File(Result_File_Path);
		  if (!file.exists()) {
	            if (file.mkdirs()) {
	                System.out.println("Folder created");
	            } else {
	                System.out.println("Failed to create directories!");
	            }
	        }
		 
		 Result_File=Result_File_Path+"Hedis_Membet_Detail_Report.xlsx";
		 
		 Copy_Param_Path=Result_File_Path+"Hedis_Membet_Detail_Report.properties";
		 File_Copy(Param_Path,Copy_Param_Path);
		
		String Query_Draft=Finder("Hedis_Member_Detail","Service_B_Query");
		String Query_Final = String.format(Query_Draft, Service_End_Date,NCQA_Year,Measure_Group);
		
		/*Service B Query Execution*/ 
		SQL_Server();
		Area.append(formatter1.format(new Date())+"Service B Query Execution Begin \n");
		res_sql = stmt_sql.executeQuery(Query_Final);
		
		 while(res_sql.next())
			{
				
			 Service_B_Query_Result.add(res_sql.getString(1));
		  	  
		  	  
			}
		
		 SQL_Server_Close();
		 
		 Service_B_Result_Convert = (String[]) Service_B_Query_Result.toArray(new String[Service_B_Query_Result.size()]);
		 Parameter_Update_Hedis_Member_Detail(Copy_Param_Path,Service_B_Result_Convert);
		 System.out.println("Service B Completion");
		 
		 REQUEST_INSTANCE_ID=Service_B_Result_Convert[0];
		 
		 System.out.println(REQUEST_INSTANCE_ID);
		 
		 
		
		  
		 Create_workbook_Sheets();
		 String HiveQuery_Draft;
	     String HiveQuery_Draft1; 
	     String HiveQuery_Draft2=")x where rnk = 1"; 
	     String Rem_Para=Parameter_string();
	     String Final_query;
	     
	     
	 	Hive_HDBC();
		Area.append(formatter1.format(new Date())+"Drop QUALITY_MEASURES_MBR_LVL_DTL_DEDUPE query Begin \n");
	 	String Q1=Finder("Hedis_Member_Detail","Drop_Table_MBR");
	 	HiveQuery_Draft=Finder("Hedis_Member_Detail","Create_MBR");
		HiveQuery_Draft1 = String.format(HiveQuery_Draft, Measure_Group,REQUEST_INSTANCE_ID,Line_of_Business,Product_Category_Code,Plan_Carrier_ID,Plan_Arrangement_ID);
		Final_query=HiveQuery_Draft1+" "+Rem_Para+" "+HiveQuery_Draft2;
		String Q2=Finder("Hedis_Member_Detail","Drop_Table_Set1");
		String Q3=Finder("Hedis_Member_Detail","Drop_Table_Set2");
		String Q4=Finder("Hedis_Member_Detail","Drop_Table_Set3");
		String Q5=Finder("Hedis_Member_Detail","Create_Table_Set1");
		String Q6=Finder("Hedis_Member_Detail","Create_Table_Set2");
		String Q7=Finder("Hedis_Member_Detail","Create_Table_Set3");
		String Q8;
		   if(Include_Member_Ids.equalsIgnoreCase("Yes")){
				Q8=Finder("Hedis_Member_Detail","Final_Query_Yes");
		   }
		   else{
			   Q8=Finder("Hedis_Member_Detail","Final_Query_No");
		   }
	
	 
	 	stmt_hive.execute(Q1);
	 	  System.out.println("1");
	 	stmt_hive.execute(Final_query);
	 	System.out.println("2");
	 	stmt_hive.execute(Q2); 
	 	System.out.println("3");
		stmt_hive.execute(Q3); 
		System.out.println("4");
		stmt_hive.execute(Q4);
		System.out.println("5");
		stmt_hive.execute(Q5);
		System.out.println("6");
		stmt_hive.execute(Q6); 
		System.out.println("7");
	 	stmt_hive.execute(Q7); 
	 	System.out.println("8");
	 	res_hive= stmt_hive.executeQuery(Q8);
	 	System.out.println("9");
	 	
	
	 	 ResultSetMetaData rsmd=res_hive.getMetaData();
		 Column_Name=new String[rsmd.getColumnCount()];
		 Column_Count=rsmd.getColumnCount();
		 for(int i=0;i<rsmd.getColumnCount();i++){
				
			 if(i==0){
				 writeBody_H(Result_File,Expected,rsmd.getColumnName(i+1).trim(),i,0,1);
				 writeBody_H(Result_File,Actual,rsmd.getColumnName(i+1).trim(),i,0,1);
			
			 Column_Name[i]=rsmd.getColumnName(i+1);
			 }
			 else{
				 writeBody_H(Result_File,Expected,rsmd.getColumnName(i+1),i,0,0);
				 writeBody_H(Result_File,Actual,rsmd.getColumnName(i+1),i,0,0);
				 Column_Name[i]=rsmd.getColumnName(i+1);
			 }
				
			}
		 
		 while(res_hive.next())
			{
			 
			 for(int k=1;k<=Column_Count;k++){
				 
			
				 
				 if(k==Column_Count){
					 
					 String val=res_hive.getString(k).trim();
					 String[] arr=val.split(" ");
					 Date date=new SimpleDateFormat("yyyy-MM-dd").parse(arr[0].trim()); 
					 DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  
		             String strDate = dateFormat.format(date);  
					 Final_output.add(strDate.trim());
					 
				 }
				 else if(k==8 || k==9 || k==10){
					 
					  int result = Integer.parseInt(res_hive.getString(k).trim());
					  DecimalFormat df = new DecimalFormat("#0.00");
					  
					  String val=String.valueOf(df.format(result));
					  Final_output.add(val);
				 }
				 else{
				 Final_output.add(res_hive.getString(k).trim());
				 }
				 
			 }
			
			
			} 
		 Hive_HDBC_Close();
		 
         Record_Count=Final_output.size()/Column_Count;
		 
		 System.out.println(Record_Count);
		 Record_Convert = (String[]) Final_output.toArray(new String[Final_output.size()]);
		 
		 System.out.println(Record_Convert.length);
		 Record_Array=new String[Column_Count][Record_Count+1];
		 
		 int ini_count=0;
		 for(int nn=0;nn<Column_Count;nn++){
			 
			 Record_Array[nn][0]=Column_Name[nn];
		 }
		 
		 for(int v=1;v<Record_Count+1;v++){
			 
			 for(int w=0;w<Column_Count;w++){
				 
				 Record_Array[w][v]=Record_Convert[ini_count];
				 ini_count++;
			 }
		 }
		 
		   
		    Bulk_Writer(Result_File,Expected,Record_Array);
		    Expected_Data=readXLSX(Result_File,Expected);
		    Expected_Index=new String[Expected_Data[0].length];
		   
		    Area.append(formatter1.format(new Date())+"Result file updated with data \n");
	 
	    
		 
		 Actual_Data_Temp=Actual_Data_Extractor(Actual_Report_Path);
		 Bulk_Writer(Result_File,Actual,Actual_Data_Temp);
		 Actual_Data=readXLSX(Result_File,Actual);
		 Actual_Index=new String[Actual_Data[0].length];
		 
		 
		    Count_Validation();
		    
		    Area.append(formatter1.format(new Date())+"Compare data begins  \n");
		  
		   
	
		    /* Comparing Actual and Generated report Data*/
		    
		    String Keyvalue=Finder("Hedis_Member_Detail","Key Column");
		    String[] Keyvalue_Split=Keyvalue.split(",");
		    Keyvalue_Column=new int[Keyvalue_Split.length];
		    
		    for(int x=0;x<Keyvalue_Split.length;x++){
		    	
		    	Keyvalue_Column[x]=Integer.parseInt(Keyvalue_Split[x])-1;
		    	System.out.println("Key :"+Keyvalue_Column[x]);
		    	
		    }
		    
		    Missing_Record();
		    Data_Validation();
		
		    Data_Match();
		    Summary_sheet();
		    
		    
		 
		 System.out.println("Done");
		    Area.append(formatter1.format(new Date())+"Compare data Ends  \n");
		    JOptionPane.showMessageDialog(null, "Execution Completed !");
		 
		
	}
	
	
	public static String[][] Actual_Data_Extractor(String Path) throws BiffException, IOException{
		
		
		String[][] mydata=null;
		String[][] Act_data;
		
		if(Path.endsWith(".xls")) {
			mydata=ExcelRead(Path,"Sheet1");
		}
		else {
			
			mydata=readXLSX(Path,"Sheet1");
			
		}
		
           int bb=0;
	    
	    for(int k=18;k<=22;k++) {
	    	
	    	if(mydata[0][k-1].contains("Request ID")) {
	    		
	    		     bb=k;
	    		     break;
	    		
	    	}
	    }
	    
	     
		int lenthg=mydata[0].length;
		int final_len=lenthg;
		 System.out.println(final_len);
		int data_count=final_len-bb;
		 System.out.println(data_count);
		Act_data=new String[11][data_count+1];
		int s=1;
		for(int i=bb;i<final_len;i++){
			
			Act_data[0][s]=mydata[0][i];
			Act_data[1][s]=mydata[1][i];
			Act_data[2][s]=mydata[2][i];
			Act_data[3][s]=mydata[3][i];
			Act_data[4][s]=mydata[4][i];
			Act_data[5][s]=mydata[5][i];
			Act_data[6][s]=mydata[6][i];
			Act_data[7][s]=mydata[7][i];
			Act_data[8][s]=mydata[8][i];
			Act_data[9][s]=mydata[9][i];
			Act_data[10][s]=mydata[10][i];
			s++;
			
		}
		
		
         
         return Act_data;
		
	}
	
	public static void Bulk_Writer(String Filepath,String Sheet,String[][] act) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	   
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(XSSFCellStyle.ALIGN_LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(false);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderRight(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderBottom(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderLeft(XSSFCellStyle.BORDER_MEDIUM);
	     
	    
	      for(int rownum = 1; rownum < act[0].length; rownum++){
	         Row row = sh.createRow(rownum);
	      
	         for(int i=0;i<act.length;i++){
	        	  sh.autoSizeColumn(i);
	        	 Cell cell = row.createCell(i);  
	 
	        	 cell.setCellValue(act[i][rownum].trim());
	        	 cell.setCellStyle(lock);
	         }
	           

	 }


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
	
	public String Parameter_string(){
		String text="";
		
		 System.out.println(BPS_Code);
		
		if(!(BPS_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(BPS_CD) in ("+BPS_Code+") \n");
		}
		
		
		
		if(!(Member_State.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(member_state_cd) in ("+Member_State+") \n");
		}
		
		if(!(CMS_Contract_ID.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(cms_cntrct_nbr) in ("+CMS_Contract_ID+") \n");
		}
		
		
		
		if(!(Group_Control.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(group_nbr) in ("+Group_Control+") \n");
		}
		
		
		if(!(Network_Service_Area.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(ntwk_srv_area_id) in ("+Network_Service_Area+") \n");
		}
		
		
		
		if(!(Plan_Sponsor_Unique.equalsIgnoreCase("Total"))){
			text=text.concat("and ps_unique_id in ("+Plan_Sponsor_Unique+") \n");
		}
		
		if(!(Coventry_Enroll_Location.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(enroll_loc) in ("+Coventry_Enroll_Location+") \n");
		}
		
		
		
		if(!(HIOS_issuer_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(hios_issuer_cd) in ("+HIOS_issuer_Code+") \n");
		}
		
		
		
		if(!(Coventry_Super_Group_Number.equalsIgnoreCase("Total"))){
			text=text.concat("and cvty_super_grp_nbr in ("+Coventry_Super_Group_Number+") \n");
		}
		
		
		
		if(!(Coventry_member_Group_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(member_group_code) in ("+Coventry_member_Group_Code+") \n");
		}
		
		if(!(PBP_ID.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(pbp_id) in ("+PBP_ID+") \n");
		}
		
		
		
		if(!(Funding_Category.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(fund_ctg_cd) in ("+Funding_Category+") \n");
		}
		
		
		if(!(Product_Line.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(product_ln_cd) in ("+Product_Line+") \n");
		}
		
		
		
		if(!(Suffix_Location.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(subgroup_nbr) in ("+Suffix_Location+") \n");
		}
		
		if(!(Account.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(account_nbr) in ("+Account+") \n");
		}
		
		
		
		if(!(HIOS_Variant_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(hios_variant_cd) in ("+HIOS_Variant_Code+") \n");
		}
		
		
		if(!(HIOS_Plan_ID.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(hios_plan_id) in ("+HIOS_Plan_ID+") \n");
		}
		
		if(!(HIOS_State_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(hios_state_cd) in ("+HIOS_State_Code+") \n");
		}
		
		
		if(!(Metallic_Level_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(metallic_level_cd) in ("+Metallic_Level_Code+") \n");
		}
		
		

		if(!(Coventry_Plan_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(plan_code) in ("+Coventry_Plan_Code+") \n");
		}
		
		if(!(Contract_Situs_INN_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(cntrt_situs_inn_cd) in ("+Contract_Situs_INN_Code+") \n");
		}
		
		
		if(!(Medicare_Primary_Code.equalsIgnoreCase("Total"))){
			text=text.concat("and trim(mdcr_prmry_ind) in ("+Medicare_Primary_Code+") \n");
		}
		
		if(!(Population_ID.equalsIgnoreCase("Total"))){
			text=text.concat("and pop_id in ("+Population_ID+") \n");
		}
		
	
		
		return text;
		
		
	}

	

}
