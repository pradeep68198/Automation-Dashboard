package com.db2.utilities;


import java.awt.AWTException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.imageio.ImageIO;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.google.common.base.Strings;



public class Support1{
	
	public static Cell cell_final;
	public static  Row row_final;
	public static XSSFCellStyle lock_Final;
	
	
	public void Src_Column_name(){
		
		int count=0;
		
		String data=General_Wrapper.Src_Query.replaceAll("\\s+", " ").trim();
		String[] data1=data.split("\\bfrom\\b");
		
		String dd2=data1[0].replace("select", "");
		dd2=dd2.trim();
		String[] dd3=dd2.split(",");
		General_Wrapper.Src_Column_Name=new String[dd3.length];
		
		System.out.println(dd3.length);
		
		for(int i=0;i<dd3.length;i++){
			String bb=dd3[i].trim();
			
				
			General_Wrapper.Src_Column_Name[i]=bb;
				System.out.println("Final Data :"+bb);
			
		}
	}
		
		public void Tgt_Column_name(){
			
			int count=0;
			
			String data=General_Wrapper.Tgt_Query.replaceAll("\\s+", " ").trim();
			String[] data1=data.split("\\bfrom\\b");
			
			String dd2=data1[0].replace("select", "");
			dd2=dd2.trim();
			String[] dd3=dd2.split(",");
			General_Wrapper.Tgt_Column_Name=new String[dd3.length];
			
			System.out.println(dd3.length);
			int cc=1;
			int jj=1;
			
			for(int i=0;i<dd3.length;i++){
				String bb=dd3[i].trim();
				
					
				General_Wrapper.Tgt_Column_Name[i]=bb;
				 if(!(General_Wrapper.Key_Column_identifier(i))) {
				General_Wrapper.Table_column.put(cc, bb);
				General_Wrapper.Column_Mismatch.put(cc, (long)0);
				cc++;
				 }
				 else {
						jj++;
						
						General_Wrapper.Table_column_key.put(jj,bb);
						
					}
			}
			
		}
		
		
	
	
	public static void Missing_Record_Bulk_Writer(String Filepath,String Sheet,ArrayList<String> map) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(HorizontalAlignment.LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(false);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(BorderStyle.MEDIUM);
	     lock.setBorderRight(BorderStyle.MEDIUM);
	     lock.setBorderBottom(BorderStyle.MEDIUM);
	     lock.setBorderLeft(BorderStyle.MEDIUM);
	    
	      for(int rownum = 1; rownum <= map.size(); rownum++){
	         Row row = sh.createRow(rownum);
	         
	         String[] act=map.get(rownum-1).split(" \\| ");
	        
	         for(int i=0;i<act.length;i++){
	        	// sh.autoSizeColumn(i);
	        	 Cell cell = row.createCell(i);  
	        	 if(Strings.isNullOrEmpty(act[i])){
		        	 cell.setCellValue(act[i]);
		        	 }
		        	 else {
		        		 cell.setCellValue(act[i].trim()); 
		        	 }
	        	 cell.setCellStyle(lock);
	         }
	           

	 }


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
	
	public  void Data_validation_Bulk_Writer(String Filepath,String Sheet,ArrayList<String> map) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(HorizontalAlignment.LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(false);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(BorderStyle.MEDIUM);
	     lock.setBorderRight(BorderStyle.MEDIUM);
	     lock.setBorderBottom(BorderStyle.MEDIUM);
	     lock.setBorderLeft(BorderStyle.MEDIUM);
	    
	      for(int rownum = 1; rownum <= map.size(); rownum++){
	         Row row = sh.createRow(rownum);
	         
	         String[] act=map.get(rownum-1).split(" \\| ");
	        
	         for(int i=0;i<act.length;i++){
	        	// sh.autoSizeColumn(i);
	        	 Cell cell = row.createCell(i);  
	        	 if(Strings.isNullOrEmpty(act[i])){
		        	 cell.setCellValue(act[i]);
		        	 }
		        	 else {
		        		 cell.setCellValue(act[i].trim()); 
		        	 }
	        	 cell.setCellStyle(lock);
	         }
	           

	 }


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}

	public static void Duplicate_Bulk_Writer(String Filepath,String Sheet,ArrayList<String> map) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(HorizontalAlignment.LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(false);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(BorderStyle.MEDIUM);
	     lock.setBorderRight(BorderStyle.MEDIUM);
	     lock.setBorderBottom(BorderStyle.MEDIUM);
	     lock.setBorderLeft(BorderStyle.MEDIUM);
	    
	   
	      for(int rownum = 1; rownum <= 100; rownum++){
	    	  if(map.size()>=rownum) {
	    	  
	         Row row = sh.createRow(rownum);
	         
	         String[] act=map.get(rownum-1).split(" \\| ");
		     
	         for(int i=0;i<act.length;i++){
	         
	        	// sh.autoSizeColumn(0);
	        	 Cell cell = row.createCell(i);  
	        	 if(Strings.isNullOrEmpty(act[i])){
		        	 cell.setCellValue(act[i]);
		        	 }
		        	 else {
		        		 cell.setCellValue(act[i].trim()); 
		        	 }
	        	 cell.setCellStyle(lock);
	         }
	           
	    	  }
	 }


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
	
	public static void Count_Write(String Filepath,String Sheet) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(HorizontalAlignment.LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(true);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(BorderStyle.MEDIUM);
	     lock.setBorderRight(BorderStyle.MEDIUM);
	     lock.setBorderBottom(BorderStyle.MEDIUM);
	     lock.setBorderLeft(BorderStyle.MEDIUM);
	     
	     int row_count=1;
	     
	             Row row1 = sh.createRow(row_count);
	        	 Cell cell1 = row1.createCell(0); 
	        	 Cell cell2 = row1.createCell(1); 
	        	 cell1.setCellValue("Total Source count");
	        	 cell2.setCellValue(String.valueOf(General_Wrapper.Total_Src_Count));
	        	 cell1.setCellStyle(lock);
	        	 cell2.setCellStyle(lock);
	        	 
	        	 
	        	 row_count++;
	        	 
	        	 Row row2 = sh.createRow(row_count);
	        	
	        	 Cell cell3 = row2.createCell(0); 
	        	 Cell cell4 = row2.createCell(1); 
	        	 cell3.setCellValue("Total Target count");
	        	 cell4.setCellValue(String.valueOf(General_Wrapper.Total_Tgt_Count));
	        	 cell3.setCellStyle(lock);
	        	 cell4.setCellStyle(lock);
	
	
	        	 row_count= row_count+2;

	        	 Row row3 = sh.createRow(row_count);
	        	
	        	 Cell cell5 = row3.createCell(0); 
	        	 Cell cell6 = row3.createCell(1); 
	        	 cell5.setCellValue("Total Source Duplicate");
	        	 cell6.setCellValue(String.valueOf(General_Wrapper.Src_duplicate_count));
	        	 cell5.setCellStyle(lock);
	        	 cell6.setCellStyle(lock);
	        	 
	        	 row_count++;
	        	 
	        	 Row row4 = sh.createRow(row_count);
	        	// sh.autoSizeColumn(row_count);
	        	 Cell cell7 = row4.createCell(0); 
	        	 Cell cell8 = row4.createCell(1); 
	        	 cell7.setCellValue("Total Target Duplicate");
	        	 cell8.setCellValue(String.valueOf(General_Wrapper.Tgt_duplicate_count));
	        	 cell7.setCellStyle(lock);
	        	 cell8.setCellStyle(lock);
	        	 
	        	 row_count= row_count+2;
	        	 
	        	 Row row5 = sh.createRow(row_count);
	        	 //sh.autoSizeColumn(row_count);
	        	 Cell cell9 = row5.createCell(0); 
	        	 Cell cell10 = row5.createCell(1); 
	        	 cell9.setCellValue("Source Missing count");
	        	 cell10.setCellValue(String.valueOf(General_Wrapper.Src_Missing_Count));
	        	 cell9.setCellStyle(lock);
	        	 cell10.setCellStyle(lock);
	        	 
	        	 row_count++;
	        	 
	        	 Row row6 = sh.createRow(row_count);
	        	 //sh.autoSizeColumn(row_count);
	        	 Cell cell11 = row6.createCell(0); 
	        	 Cell cell12 = row6.createCell(1); 
	        	 cell11.setCellValue("Target Missing count");
	        	 cell12.setCellValue(String.valueOf(General_Wrapper.Tgt_Missing_Count));
	        	 cell11.setCellStyle(lock);
	        	 cell12.setCellStyle(lock);
	        	 
	        	 row_count= row_count+2;
	        	 
	        	 Row row7 = sh.createRow(row_count);
	        	 //sh.autoSizeColumn(row_count);
	        	 Cell cell13 = row7.createCell(0);
	        	 Cell cell14 = row7.createCell(1); 
	        	 cell13.setCellValue("Total Data Mismatch Record");
	        	 cell14.setCellValue(String.valueOf(General_Wrapper.Data_Mismatch_Count));
	        	 cell13.setCellStyle(lock);
	        	 cell14.setCellStyle(lock);
	        	 
	        	 
	        	 row_count++;
	        	 
	        	 for(int i=1;i<=General_Wrapper.Column_Mismatch.size();i++) {
	        			
	        			if(General_Wrapper.Column_Mismatch.get(i)>0) {
	        				
	        				 Row row8 = sh.createRow(row_count);
	        	       
	        	        	 Cell cell15 = row8.createCell(0);
	        	        	 Cell cell16 = row8.createCell(1); 
	        	        	 
	        	        	 cell15.setCellValue(General_Wrapper.Table_column.get(i));
	        	        	 cell16.setCellValue(String.valueOf(General_Wrapper.Column_Mismatch.get(i)));
	        	        	 cell15.setCellStyle(lock);
	        	        	 cell16.setCellStyle(lock);
	        			
	        	        	 row_count++;
	        			}
	        		}
	        	 


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
	
	public static void Summary_Write(String Filepath,String Sheet) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     lock_Final=(XSSFCellStyle) wb.createCellStyle();
	     lock_Final.setAlignment(HorizontalAlignment.LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(true);
	     font.setItalic(false);
	     lock_Final.setFont(font);
	     lock_Final.setBorderTop(BorderStyle.MEDIUM);
	     lock_Final.setBorderRight(BorderStyle.MEDIUM);
	     lock_Final.setBorderBottom(BorderStyle.MEDIUM);
	     lock_Final.setBorderLeft(BorderStyle.MEDIUM);
	     
	     int row_count=0;
	     
	             row_final = sh.createRow(row_count);
	        
	             cell_value("Type of Validation",0);
	             cell_value("Column Name",1);
	             cell_value("Target Table",2);
	             cell_value("Additional Keyword",3);
	             cell_value("Status",4);
	        	 
	        	 
	        	 
	        	 row_count++;
	        	 row_final = sh.createRow(row_count);
	        	 if(General_Wrapper.Count_Mismatch_Flag) {
	        		 cell_value("Count_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Fail",4);
	        		 
	        	 }
	        	
	        	 else {
	        		 
	        		 cell_value("Count_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Pass",4);
	        		 
	        	 }
	
	
	        	 row_count++;

	        	 row_final = sh.createRow(row_count);
	        	 if(General_Wrapper.Source_Missing_Flag) {
	        		 cell_value("Source_Missing_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Fail",4);
	        		 
	        	 }
	        	
	        	 else {
	        		 
	        		 cell_value("Source_Missing_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Pass",4);
	        		 
	        	 }
	        	 
	        	 row_count++;

	        	 row_final = sh.createRow(row_count);
	        	 if(General_Wrapper.Target_Missing_Flag) {
	        		 cell_value("Target_Missing_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Fail",4);
	        		 
	        	 }
	        	
	        	 else {
	        		 
	        		 cell_value("Target_Missing_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Pass",4);
	        		 
	        	 }
	        	 
	        	 
	        	 row_count++;
	        	 
	        	 row_final= sh.createRow(row_count);
	        	
	        	 if(General_Wrapper.Source_Duplicate_Flag || General_Wrapper.Target_Duplicate_Flag) {
	        		 cell_value("Duplicate_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Fail",4);
	        		 
	        	 }
	        	
	        	 else {
	        		 
	        		 cell_value("Duplicate_Validation",0);
		             cell_value("NA",1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             cell_value("Pass",4);
	        		 
	        	 }
	        	 
	        	
	        	 
	        	
	        	 for(int i=1;i<=General_Wrapper.Column_Mismatch.size();i++){
	        		 row_count++;
	        		 row_final = sh.createRow(row_count);
	        		 cell_value("Data_Validation",0);
		             cell_value(General_Wrapper.Table_column.get(i),1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             if(General_Wrapper.Column_Mismatch.get(i)>0){
		            	 cell_value("Fail",4);
		    		}
		    		else{
		    			 cell_value("Pass",4);
		    		}
		    		
		             
		             
	        		}
	        	 
	        	 for(int i=1;i<=General_Wrapper.Table_column_key.size();i++){
	        		 row_count++;
	        		 row_final = sh.createRow(row_count);
	        		 cell_value("Data_Validation",0);
		             cell_value(General_Wrapper.Table_column_key.get(i),1);
		             cell_value(General_Wrapper.Target_Table_Name,2);
		             cell_value(General_Wrapper.Add_Key,3);
		             if(General_Wrapper.Target_Missing_Flag || General_Wrapper.Source_Missing_Flag ){
		            	 cell_value("Fail",4);
		    		}
		    		else{
		    			 cell_value("Pass",4);
		    		}
		    		  
		             
	        		}
	        	 
	        	 


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
	
 

  public static void cell_value(String val,int cell) {
	   
	   cell_final=row_final.createCell(cell); 
	   cell_final.setCellValue(val);
	   cell_final.setCellStyle(lock_Final);
 	
	   
  }
  
  
  public static void Copy(String text) throws AWTException, InterruptedException{
		Robot r = new Robot();
		StringSelection stringSelection = new StringSelection(text);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(stringSelection, stringSelection);
		r.keyPress(KeyEvent.VK_CONTROL);
		r.keyPress(KeyEvent.VK_V);
		r.keyRelease(KeyEvent.VK_V);
		r.keyRelease(KeyEvent.VK_CONTROL);
		Thread.sleep(2000);
		
	}
	
	public static void Enter() throws AWTException, InterruptedException{
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
		Thread.sleep(2000);
	}
	
	public static void PressTAB(int count) throws AWTException, InterruptedException{
		Robot r = new Robot();
		for(int i=1;i<=count;i++){
		r.keyPress(KeyEvent.VK_TAB);
		r.keyRelease(KeyEvent.VK_TAB);
		Thread.sleep(1000);
		}
	}
	
	public static void Delete() throws AWTException, InterruptedException{
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DELETE);
		r.keyRelease(KeyEvent.VK_DELETE);
		Thread.sleep(2000);
	}
	
	public static void f3(int count) throws AWTException, InterruptedException{
		Robot r = new Robot();
		for(int i=1;i<=count;i++){
		r.keyPress(KeyEvent.VK_F3);
		r.keyRelease(KeyEvent.VK_F3);
		Thread.sleep(2000);
	
		}
	}
	public static void PressDEL(int count) throws AWTException, InterruptedException{
		Robot r = new Robot();
		for(int i=1;i<=count;i++){
		r.keyPress(KeyEvent.VK_DELETE);
		r.keyRelease(KeyEvent.VK_DELETE);
		Thread.sleep(1000);
		}
	}
	
	
	
	public static void validation() throws InterruptedException, IOException, AWTException {
		
		 BufferedImage subimage_Active = ImageIO.read(new File("./Image/Active.png"));
		 BufferedImage subimage_Fail = ImageIO.read(new File("./Image/Fail.png"));
		 BufferedImage subimage_Success = ImageIO.read(new File("./Image/Success.png"));
		 
		 BufferedImage Main_image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
		 boolean flag=true;
		 
		 if(match(subimage_Fail, Main_image) != null) {
			 flag=false;
		 }
		 
		 if(match(subimage_Success, Main_image) != null) {
			 flag=false;
		 }
		 
		if(flag) {
		 
		for(int i=1;i<=120;i++) {
			
			if(i%5==0) {
				
				 BufferedImage Main_image1 = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
				
				if(match(subimage_Fail, Main_image1) != null) {
					General_Wrapper.Mainframe_Status="Fail";
					break;
				 }
				 
				 if(match(subimage_Success, Main_image1) != null) {
					 General_Wrapper.Mainframe_Status="Pass";
					 break;
				 }
				 
				 if(match(subimage_Active, Main_image1) != null) {
						continue;
					 }
						
				
			}
			
			loop();
			
		}
		}
		
		
	}
	
	public static void loop() throws InterruptedException {
		
		for(int j=1;j<=60;j++) {
			
			Thread.sleep(500);
		}
		
	}
	
	 public static Point match(BufferedImage subimage, BufferedImage image) {
	        
	        for (int i = 0; i <= image.getWidth() - subimage.getWidth(); i++) {
	            check_subimage:
	            for (int j = 0; j <= image.getHeight() - subimage.getHeight(); j++) {
	                for (int ii = 0; ii < subimage.getWidth(); ii++) {
	                    for (int jj = 0; jj < subimage.getHeight(); jj++) {
	                        if (subimage.getRGB(ii, jj) != image.getRGB(i + ii, j + jj)) {
	                            continue check_subimage;
	                        }
	                    }
	                }
	               
	                return new Point(i, j);
	            }
	        }
	        return null;
	    }

	    
	    public static void Kill_Bat() throws Exception{
	    	
	    	 Process p1 = Runtime.getRuntime().exec("taskkill /F /IM RumbaPage.exe");
	   		
	   	
	   	}
	    
	    
	    public static void Error_exception(String Filepath,String Sheet,String Error) throws IOException{
			
			 FileInputStream inputStream = new FileInputStream(Filepath);
		     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
		     inputStream.close();

		     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
		     wb.setCompressTempFiles(true);

		     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
		     sh.setRandomAccessWindowSize(100);
		     
		     lock_Final=(XSSFCellStyle) wb.createCellStyle();
		     lock_Final.setAlignment(HorizontalAlignment.LEFT);
		     XSSFFont font= (XSSFFont) wb.createFont();
		     font.setFontHeightInPoints((short)10);
		     font.setFontName("Verdana");
		     font.setColor(IndexedColors.BLACK.getIndex());
		     font.setBold(true);
		     font.setItalic(false);
		     lock_Final.setFont(font);
		     lock_Final.setBorderTop(BorderStyle.MEDIUM);
		     lock_Final.setBorderRight(BorderStyle.MEDIUM);
		     lock_Final.setBorderBottom(BorderStyle.MEDIUM);
		     lock_Final.setBorderLeft(BorderStyle.MEDIUM);
		     
		     int row_count=1;
		     
		             row_final = sh.createRow(row_count);
		        
		             cell_value("Error Occured will processing",0);
		             cell_value(Error,1);
		             
		        	 


		 FileOutputStream out = new FileOutputStream(Filepath);
		 wb.write(out);
		 out.close();
		}
	    
	    
	    public  void Header_Missing_Src(String Filepath,String Sheet) throws IOException{
	    	
	   	 FileInputStream inputStream = new FileInputStream(Filepath);
	        XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	        inputStream.close();

	        SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	        wb.setCompressTempFiles(true);

	        SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	        sh.setRandomAccessWindowSize(100);
	        
	        XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	        lock.setAlignment(HorizontalAlignment.LEFT);
	        XSSFFont font= (XSSFFont) wb.createFont();
	        font.setFontHeightInPoints((short)10);
	        font.setFontName("Verdana");
	        font.setColor(IndexedColors.BLACK.getIndex());
	        font.setBold(true);
	        font.setItalic(false);
	        lock.setFont(font);
	        lock.setBorderTop(BorderStyle.MEDIUM);
	        lock.setBorderRight(BorderStyle.MEDIUM);
	        lock.setBorderBottom(BorderStyle.MEDIUM);
	        lock.setBorderLeft(BorderStyle.MEDIUM);
	        
	        
	          Row row = sh.createRow(0);
	          Cell cell1 = row.createCell(0); 
	          cell1.setCellValue("Error Desc");
	          
	            int i=1;
	           
	            for(int aa=0;aa<General_Wrapper.Keyvalue_Column.length;aa++){
	           	
	           	 Cell cell = row.createCell(i); 
	           	     
	     
	   	        	 cell.setCellValue(General_Wrapper.Src_Column_Name[General_Wrapper.Keyvalue_Column[aa]]);
	           	     
	   	        		
	   	        	
	           	 cell.setCellStyle(lock);
	           	 i++;
	            }
	              

	    


	    FileOutputStream out = new FileOutputStream(Filepath);
	    wb.write(out);
	    out.close();
	   }

	   public  void Header_Missing_tgt(String Filepath,String Sheet) throws IOException{
	   	
	   	 FileInputStream inputStream = new FileInputStream(Filepath);
	        XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	        inputStream.close();

	        SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	        wb.setCompressTempFiles(true);

	        SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	        sh.setRandomAccessWindowSize(100);
	        
	        XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	        lock.setAlignment(HorizontalAlignment.LEFT);
	        XSSFFont font= (XSSFFont) wb.createFont();
	        font.setFontHeightInPoints((short)10);
	        font.setFontName("Verdana");
	        font.setColor(IndexedColors.BLACK.getIndex());
	        font.setBold(true);
	        font.setItalic(false);
	        lock.setFont(font);
	        lock.setBorderTop(BorderStyle.MEDIUM);
	        lock.setBorderRight(BorderStyle.MEDIUM);
	        lock.setBorderBottom(BorderStyle.MEDIUM);
	        lock.setBorderLeft(BorderStyle.MEDIUM);
	        
	        
	          Row row = sh.createRow(0);
	          Cell cell1 = row.createCell(0); 
	          cell1.setCellValue("Error Desc");
	            int i=1;
	           
	            for(int aa=0;aa<General_Wrapper.Keyvalue_Column.length;aa++){
	           	
	           	 Cell cell = row.createCell(i); 
	           	     
	     
	   	        	 cell.setCellValue(General_Wrapper.Tgt_Column_Name[General_Wrapper.Keyvalue_Column[aa]]);
	           	     
	   	        		
	   	        	
	           	 cell.setCellStyle(lock);
	           	 i++;
	            }
	              

	    


	    FileOutputStream out = new FileOutputStream(Filepath);
	    wb.write(out);
	    out.close();
	   }
	   
	   
	   public  void Header_data_mismatch(String Filepath,String Sheet) throws IOException{
			
			 FileInputStream inputStream = new FileInputStream(Filepath);
		     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
		     inputStream.close();

		     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
		     wb.setCompressTempFiles(true);

		     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
		     sh.setRandomAccessWindowSize(100);
		     
		     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
		     lock.setAlignment(HorizontalAlignment.LEFT);
		     XSSFFont font= (XSSFFont) wb.createFont();
		     font.setFontHeightInPoints((short)10);
		     font.setFontName("Verdana");
		     font.setColor(IndexedColors.BLACK.getIndex());
		     font.setBold(true);
		     font.setItalic(false);
		     lock.setFont(font);
		     lock.setBorderTop(BorderStyle.MEDIUM);
		     lock.setBorderRight(BorderStyle.MEDIUM);
		     lock.setBorderBottom(BorderStyle.MEDIUM);
		     lock.setBorderLeft(BorderStyle.MEDIUM);
		     
		     
		       Row row = sh.createRow(0);
		      
		         int i=0;
		        
		         for(int aa=0;aa<General_Wrapper.Keyvalue_Column.length;aa++){
		        	
		        	     Cell cell = row.createCell(i); 
			        	 cell.setCellValue(General_Wrapper.Tgt_Column_Name[General_Wrapper.Keyvalue_Column[aa]]);
		        	    	
		        	 cell.setCellStyle(lock);
		        	 i++;
		         }
		         
		         for(int bb=0;bb<General_Wrapper.Tgt_Column_Name.length;bb++){
		        	 
		        	 if(!(General_Wrapper.Key_Column_identifier(bb))) {
			        	
		    	     Cell cell = row.createCell(i); 
		        	 cell.setCellValue(General_Wrapper.Tgt_Column_Name[bb]+"_Target");	
		    	     cell.setCellStyle(lock);
		    	     i++;
		    	     
		    	     Cell cell1 = row.createCell(i); 
		        	 cell1.setCellValue(General_Wrapper.Tgt_Column_Name[bb]+"_Source");	
		    	     cell1.setCellStyle(lock);
		    	     i++;
		    	     
		    	     Cell cell2 = row.createCell(i); 
		        	 cell2.setCellValue(General_Wrapper.Tgt_Column_Name[bb]+"_Status");	
		    	     cell2.setCellStyle(lock);
		    	     i++;
		    	 
		        	 }
		     }
		           

		 


		 FileOutputStream out = new FileOutputStream(Filepath);
		 wb.write(out);
		 out.close();
		}
	   
	   public  void Header_No_pri(String Filepath,String Sheet) throws IOException{
			
			 FileInputStream inputStream = new FileInputStream(Filepath);
		     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
		     inputStream.close();

		     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
		     wb.setCompressTempFiles(true);

		     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
		     sh.setRandomAccessWindowSize(100);
		     
		     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
		     lock.setAlignment(HorizontalAlignment.LEFT);
		     XSSFFont font= (XSSFFont) wb.createFont();
		     font.setFontHeightInPoints((short)10);
		     font.setFontName("Verdana");
		     font.setColor(IndexedColors.BLACK.getIndex());
		     font.setBold(true);
		     font.setItalic(false);
		     lock.setFont(font);
		     lock.setBorderTop(BorderStyle.MEDIUM);
		     lock.setBorderRight(BorderStyle.MEDIUM);
		     lock.setBorderBottom(BorderStyle.MEDIUM);
		     lock.setBorderLeft(BorderStyle.MEDIUM);
		     
		     
		       Row row = sh.createRow(0);
		       Cell cell1 = row.createCell(0); 
		       cell1.setCellValue("No non Primary key columns");
		         
			        		
			        	
		        	 cell1.setCellStyle(lock);
		        

		 


		 FileOutputStream out = new FileOutputStream(Filepath);
		 wb.write(out);
		 out.close();
		}
	   
	   
	   public  void Header_Duplicate(String Filepath,String Sheet,String[] act) throws IOException{
			
			 FileInputStream inputStream = new FileInputStream(Filepath);
		     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
		     inputStream.close();

		     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
		     wb.setCompressTempFiles(true);

		     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
		     sh.setRandomAccessWindowSize(100);
		     
		     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
		     lock.setAlignment(HorizontalAlignment.LEFT);
		     XSSFFont font= (XSSFFont) wb.createFont();
		     font.setFontHeightInPoints((short)10);
		     font.setFontName("Verdana");
		     font.setColor(IndexedColors.BLACK.getIndex());
		     font.setBold(true);
		     font.setItalic(false);
		     lock.setFont(font);
		     lock.setBorderTop(BorderStyle.MEDIUM);
		     lock.setBorderRight(BorderStyle.MEDIUM);
		     lock.setBorderBottom(BorderStyle.MEDIUM);
		     lock.setBorderLeft(BorderStyle.MEDIUM);
		     
		     
		         Row row = sh.createRow(0);
		        
		         for(int i=0;i<act.length;i++){
		        	// sh.autoSizeColumn(i);
		        	 Cell cell = row.createCell(i);  
		        	 if(Strings.isNullOrEmpty(act[i])){
			        	 cell.setCellValue(act[i]);
			        	 }
			        	 else {
			        		 cell.setCellValue(act[i].trim()); 
			        	 }
		        	 cell.setCellStyle(lock);
		         }
		           

		 


		 FileOutputStream out = new FileOutputStream(Filepath);
		 wb.write(out);
		 out.close();
		}

		
	 


  

	
	
	
}
