package com.report.utilities;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public class JFRAME_File extends JDialog{
	public static JTextField tfUsername;
	public static JPasswordField pfPassword;
	public static JLabel lbUsername;
	public static JLabel lbPassword;
	public static JLabel Type_list;
	public static JTextField Type_Value;
	public static JButton PROP_Path;
	public static JTextField PROP_Path_Field;
	public static JButton btnLogin;
    public static String NAme,Type_L;
    public static String Path,Value;
    public static char[] PAssword;
	
	public static String[] Jframe_fun(){
		
		String[] value=new String[4];
		String[] Type_List = new String[] {"HEDIS Rate Report by Request ID", "HEDIS Rate Report by Reporting Entity", "HEDIS Rate Report","HEDIS Member Detail Report"};
		 JFrame frame = new JFrame("JDialog Demo");
	     JPanel panel = new JPanel(new GridBagLayout());
	     GridBagConstraints cs = new GridBagConstraints();
	     cs.fill = GridBagConstraints.HORIZONTAL;
	        
	        lbUsername = new JLabel("Username: ");
	        cs.gridx = 0;
	        cs.gridy = 0;
	        cs.gridwidth = 1;
	        panel.add(lbUsername, cs);
	 
	        tfUsername = new JTextField(20);
	        cs.gridx = 1;
	        cs.gridy = 0;
	        cs.gridwidth = 2;
	        panel.add(tfUsername, cs);
	        tfUsername.setText("s011287");
	        //tfUsername.setText("N278130");
	       
	        lbPassword = new JLabel("Password: ");
	        cs.gridx = 0;
	        cs.gridy = 1;
	        cs.gridwidth = 1;
	        panel.add(lbPassword, cs);
	 
	        pfPassword = new JPasswordField(20);
	        cs.gridx = 1;
	        cs.gridy = 1;
	        cs.gridwidth = 2;
	        panel.add(pfPassword, cs);
	        pfPassword.setText("$FF8RY9E");
	        //pfPassword.setText("Prad@123");
	        
	        PROP_Path_Field = new JTextField(20);
	        cs.gridx = 1;
	        cs.gridy = 2;
	        cs.gridwidth = 2;
	        panel.add(PROP_Path_Field, cs);
	       
	        PROP_Path= new JButton("Parameter file..");
	        PROP_Path.addActionListener(new ActionListener() {
	        	 
	            public void actionPerformed(ActionEvent e) {
	            	
	            	JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
	        		jfc.setDialogTitle("Select an Properties file");
	        		jfc.setAcceptAllFileFilterUsed(false);
	        		FileNameExtensionFilter filter = new FileNameExtensionFilter("PROPERTIES file", "properties");
	        		jfc.addChoosableFileFilter(filter);

	        		int returnValue = jfc.showOpenDialog(null);
	        		if (returnValue == JFileChooser.APPROVE_OPTION) {
	        			
	        			PROP_Path_Field.setText(jfc.getSelectedFile().getPath());
	        			Properties prop = new Properties();
	        			InputStream input = null;
						
							try {
								input = new FileInputStream(PROP_Path_Field.getText());
							} catch (FileNotFoundException e1) {
								
								e1.printStackTrace();
							}
						
	      
							try {
								prop.load(input);
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						
	        			
	        			Value=prop.getProperty("Report_Type");
	        			
	        			Type_Value.setText(Value);
	        			
	        		}
	            	 
	   
	            }
	        });
	        
	        cs.gridx = 0;
	        cs.gridy = 2;
	        cs.gridwidth = 1;
	        panel.add(PROP_Path, cs);
	        
	        Type_list = new JLabel("Want to Perform : ");
	        cs.gridx = 0;
	        cs.gridy = 3;
	        cs.gridwidth = 1;
	        panel.add(Type_list, cs);
	        
	        Type_Value=new JTextField(20);
	        Type_Value.setEditable(false);
	        cs.gridx = 1;
	        cs.gridy = 3;
	        cs.gridwidth = 2;
	        panel.add(Type_Value, cs);
	      
	
	        panel.setBorder(new LineBorder(Color.GRAY));
	        
	        btnLogin = new JButton("Proceed");
	        btnLogin.addActionListener(new ActionListener() {
	        	 
	            public void actionPerformed(ActionEvent e) {
	            	
	            	NAme=tfUsername.getText().trim();
	            	PAssword=pfPassword.getPassword();
	            	String b = new String(PAssword);
	            	Path=PROP_Path_Field.getText().trim();
	            	Type_L=Type_Value.getText().trim();
	            			
	            	//System.out.println(NAme);
	                //System.out.println(b);
	                //System.out.println(Path);
	                //System.out.println(Type_L);
	                
	                value[0]=NAme;
	                value[1]=b;
	                value[2]=Path;
	                value[3]=Type_L;
	                frame.dispose();
	                
	            	 
	   
	            }
	        });
	        JPanel bp = new JPanel();
	        bp.add(btnLogin);
	        
	     
	        frame.pack();
	        frame.setResizable(false);
	        frame.setLocationRelativeTo(frame);
	  
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500,200);
        frame.setLayout(new FlowLayout());
        frame.getContentPane().add(panel, BorderLayout.CENTER);
        frame.getContentPane().add(bp, BorderLayout.PAGE_END);
      
        frame.setVisible(true);
		
		return value;
		
	}
	
	public static void Bulk_Writer(String Filepath,String Sheet,String[][] act) throws IOException{
		
		 FileInputStream inputStream = new FileInputStream(Filepath);
	     XSSFWorkbook wb_template = new XSSFWorkbook(inputStream);
	     inputStream.close();

	     SXSSFWorkbook wb = new SXSSFWorkbook(wb_template); 
	     wb.setCompressTempFiles(true);

	     SXSSFSheet sh = (SXSSFSheet) wb.getSheet(Sheet);
	     sh.setRandomAccessWindowSize(100);
	     
	     XSSFCellStyle lock=(XSSFCellStyle) wb.createCellStyle();
	     lock.setAlignment(XSSFCellStyle.ALIGN_LEFT);
	     XSSFFont font= (XSSFFont) wb.createFont();
	     font.setFontHeightInPoints((short)10);
	     font.setFontName("Verdana");
	     font.setColor(IndexedColors.BLACK.getIndex());
	     font.setBold(false);
	     font.setItalic(false);
	     lock.setFont(font);
	     lock.setBorderTop(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderRight(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderBottom(XSSFCellStyle.BORDER_MEDIUM);
	     lock.setBorderLeft(XSSFCellStyle.BORDER_MEDIUM);
	    
	      for(int rownum = 1; rownum < act[0].length; rownum++){
	         Row row = sh.createRow(rownum);
	        
	         for(int i=0;i<act.length;i++){
	        	 sh.autoSizeColumn(i);
	        	 Cell cell = row.createCell(i);  
	        	 cell.setCellValue(act[i][rownum].trim());
	        	 cell.setCellStyle(lock);
	         }
	           

	 }


	 FileOutputStream out = new FileOutputStream(Filepath);
	 wb.write(out);
	 out.close();
	}
 

}
