package com.FMS.Scripts;

import static org.testng.Assert.assertTrue;

import java.awt.AWTException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;

import org.testng.Assert;
import org.testng.util.Strings;

import com.FMS.Func_Script.Mark_Logic;
import com.FMS.Utilities.Base_Class;
import com.FMS.Utilities.File_Compare;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;

public class HR_Hub_Validation extends Base_Class{
	
	
	public String Batch_Job,Generated_File_Path,Expected_File_Name,Header,Footer,ML_Query,Source_DB,Primary_Index,Query_Output_Path,ExpectedDelimiter,FTP,Column_Name;
	
	public String Delimiter=null;
	public HR_Hub_Validation() throws FileNotFoundException, IOException
	{
		super();
		 
	}
	
	
	public void HR_Hub_Workflow(String Index_Num) throws IOException, JSchException, InterruptedException, ClassNotFoundException, SQLException, SftpException, AWTException {
		
		
		
		html_update("Starting HRHUB Validation");
		HRHUB_Index_Num=Index_Num;
		Find_Details(Index_Num);
		
		html_update("Running HRHUB Batch Jobs");
		String Final_Name = null;
		
		if(!(Strings.isNullOrEmpty(Batch_Job))) {
			
		String Result=HR_HUB_putty(Batch_Job);
		if(Result.contains("successfully ran")) {
			html_update("Batch Jobs Ran Successfully");
			 reportStep_only(Batch_Job+" Batch Job run Successfully", "PASS");
		}
		else {
			html_update("Batch Jobs Failed");
			reportStep_only(Batch_Job+" Batch Job run Failed", "FAIL");
			Assert.assertTrue(false);
			
		}
		html_update("Fetching the Latest Generated file from UNIX path");
		Thread.sleep(15000);
		
		
		for(int i=0;i<=30;i++) {
			
			String File_Name=HR_HUB_putty("cd "+Generated_File_Path+" ;latest_file=$(ls -t | head -n 1) ; ls \"$latest_file\"");
			
			if(File_Name.contains(Expected_File_Name)) {
				Final_Name=Generated_File_Path.trim()+File_Name.trim();
				break;
			}
			
			Thread.sleep(3000);
			
			
		}
		}
		else {
			
			
			Final_Name=Generated_File_Path.trim()+Expected_File_Name.trim();
		}
		
		
		html_update("Transferring Latest Generated file to Specified Location");
		HR_HUB_Unix_Caller(Final_Name.trim(),Download_Path+"HR_HUB_Actual_Data.txt");
		html_update("Navigating to Mark Logic Query Console");
		
		String final_value=new Mark_Logic().HR_HUB_ML_Launcher(Source_DB,ML_Query,Query_Output_Path,"HR_HUB_Expected");
		
		
		if(ExpectedDelimiter.equals("|")) {
			Delimiter="\\|";
		}
		else {
			Delimiter=ExpectedDelimiter;
		}
		
		
		 html_update("HRHUB - File Comparsion Begin");
		
		new File_Compare().HR_HUB_Common_caller(Primary_Index,Report_Path+"HR_HUB_DataCompare.xlsx",Download_Path+"HR_HUB_Actual_Data.txt",final_value,Column_Name,Delimiter,Header,Footer);
		}
	
	
	public void Find_Details(String Index) throws IOException {
		
		String[][] data=readXLSX(HRHUB_Sheet,"Sheet1");
		
		
		for(int i=1;i<data[0].length;i++){
		
		 if(data[0][i].equalsIgnoreCase(Index)){
			  
			 Batch_Job=data[1][i];
			 Generated_File_Path=data[2][i];
			 Expected_File_Name=data[3][i];
			 Header=data[4][i];
			 Footer=data[5][i];
			 ML_Query=data[6][i];
			 Source_DB=data[7][i];
			 Primary_Index=data[8][i];
			 Query_Output_Path=data[9][i];
			 ExpectedDelimiter=data[10][i];
			 FTP=data[11][i];
			 Column_Name=data[12][i];
			
				
				 break;
				 	 
		 }	 
		 
		}
		
		
	
		
		
	}
	
	


}
