package com.JE.Utilities;

import java.awt.AWTException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactoryConfigurationError;

import org.apache.http.auth.AuthenticationException;
import org.openqa.selenium.By;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.ITestContext;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.xml.sax.SAXException;


import com.JE.Sprint1.CT_Non_Severance;
import com.JE.Sprint1.CT_Severance;
import com.JE.Sprint1.CVS_Plan;
import com.JE.Sprint1.Candidate_Compare;
import com.JE.Sprint1.Legacy_override;
import com.JE.Sprint1.NY_Non_Severance;
import com.JE.Sprint1.NY_Severance;
import com.JE.Sprint1.Non_Sev_Legacy;
import com.JE.Sprint1.Severance_Candidate;
import com.JE.Sprint1.Severance_Candidate_Multiple;
import com.JE.Sprint1.Work_Flow_Script;
import com.JE.Sprint1.Candidate_Ranking;
import com.JE.Sprint1.Candidate_Req_Report_Script;
import com.JE.Sprint1.Functional_Elimination_Script;
import com.JE.Sprint1.JE_Multiple;
import com.JE.Tests.Sprint1_CVS;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;


public class Driver_Wrapper extends General_Wrapper {
	
	public Properties prob;
	
	public Legacy_override legacy;
	public CVS_Plan CVS;
	public Non_Sev_Legacy NS_Legacy;
	public NY_Severance NY_S;
	public NY_Non_Severance NY_NS;
	public CT_Severance CT_S;
	public CT_Non_Severance CT_NS;
	public Severance_Candidate CR_main;
	public Functional_Elimination_Script FES;
	public Candidate_Compare CC_Test;
	public Work_Flow_Script WF;
	public JE_Multiple JE_Mul;
	public Severance_Candidate_Multiple CR_Mul;
	//public Candidate_Req_Report_Script Can_Rep;
	
	
	public int i=0;
	
	
	public Driver_Wrapper() throws IOException{
		
		super();
		prob=new Properties();
		
		legacy=new Legacy_override();
		CVS=new CVS_Plan();
		NS_Legacy=new Non_Sev_Legacy();
		NY_S=new NY_Severance();
		NY_NS=new NY_Non_Severance();
		CT_S=new CT_Severance();
		CT_NS=new CT_Non_Severance();
		CR_main=new Severance_Candidate();
		FES=new Functional_Elimination_Script();
		CC_Test=new Candidate_Compare();
		WF=new Work_Flow_Script();
		JE_Mul=new JE_Multiple();
		CR_Mul=new Severance_Candidate_Multiple();
		//Can_Rep=new Candidate_Req_Report_Script();
	}
	

	@BeforeClass
	@Parameters({"Excelsheet"})
	public void beforeClass(String Excelsheet,ITestContext context) throws FileNotFoundException, IOException, InterruptedException, AWTException {
		
		String className = getClass().getSimpleName();
		System.out.println(className);
		Excel_sheet=Excelsheet;
		formatter1 = new SimpleDateFormat("dd_MM_yyyy_hh_mm");
		String folder_Name1=Excel_sheet+"_"+formatter1.format(new Date());
		String folder_Name=folder_Name1+"\\";
		prob.load(new FileInputStream(new File("Object.properties")));
		ML_Username=prob.getProperty("Username");
		ML_Pwd=prob.getProperty("Password");
		Transfer_Job=prob.getProperty("Transfer_Job");
		Write_Status_Job=prob.getProperty("Write_Status_Job");
		Write_Status_File=prob.getProperty("Write_Status_File");
		Data_Sheet=prob.getProperty("Data_Sheet")+Excel_sheet+".xlsx";
		Selection_Tool=prob.getProperty("Selection_Tool");
		Rules_Book=prob.getProperty("Rules_Book");
		Chrome_Driver=prob.getProperty("Chrome_Driver");
		ML_URL=prob.getProperty("ML_URL");
		New_Report=prob.getProperty("New_Report");
		PDF_Content=prob.getProperty("PDF_Content");
		Notice_JE_Page=prob.getProperty("Notice_JE_Page");
		Result_Path=prob.getProperty("Result_Path")+folder_Name;
		JE_Page=prob.getProperty("JE_Page");
		JE_Information_Page=prob.getProperty("JE_Information_Page");
		JE_Administration_Page=prob.getProperty("JE_Administration_Page");
		Candidate_Page=prob.getProperty("Candidate_Page");
		Functional_Elimination_Page=prob.getProperty("Functional_Elimination_Page");
		Candidate_Compare_Page=prob.getProperty("Candidate_Compare_Page");
		Candidate_Employee_Request_Page=prob.getProperty("Candidate_Employee_Request_Page");
		Pending_Job_Elimination_Page=prob.getProperty("Pending_Job_Elimination_Page");
		ML_Query=prob.getProperty("ML_Query");
	
		Img_Path=Result_Path+"Screenshots\\";
		Report_Path=Result_Path+"Reports\\";
		Doc_Path=Result_Path+"Documents\\";
		Download_Path=Result_Path+"Download\\";
		File files1 = new File(Img_Path);
        if (!files1.exists()) {
            if (files1.mkdirs()) {
                System.out.println("Folder created");
            } else {
                System.out.println("Failed to create directories!");
            }
        }
        File files2 = new File(Doc_Path);
        if (!files2.exists()) {
            if (files2.mkdirs()) {
                System.out.println("Folder created");
            } else {
                System.out.println("Failed to create directories!");
            }
        }
        File files3 = new File(Report_Path);
        if (!files3.exists()) {
            if (files3.mkdirs()) {
                System.out.println("Folder created");
            } else {
                System.out.println("Failed to create directories!");
            }
        }
        
        File files4 = new File(Download_Path);
        if (!files4.exists()) {
            if (files4.mkdirs()) {
                System.out.println("Folder created");
            } else {
                System.out.println("Failed to create directories!");
            }
        }
        
     
		startResult();
		 
		
		

		
	}
	
	
	

	@BeforeMethod
	
	public void beforeMethod(Method testMethod) throws IOException, InterruptedException, AWTException{
		
		
		Test test1 = testMethod.getAnnotation(Test.class);
		General_Wrapper.testCaseName=testMethod.getName()+"_Iteration_"+i++;
		General_Wrapper.testDescription=test1.description();
		General_Wrapper.category="JE Integration Regression";
		General_Wrapper.authors="Abdul";
		test = startTestCase(testCaseName, testDescription);
		test.assignCategory(category);
		test.assignAuthor(authors);
		 
		Browser_Setup("Chrome");
		
		
	}
		
	@AfterClass
	public void afterClass() {
		
		endResult();
		
		
	}
	
	
	@AfterMethod
	public void afterMethod() throws IOException {
		
		driver.quit();
		endTestcase();

	
		
	}
	
}

