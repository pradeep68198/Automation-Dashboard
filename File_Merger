package com.FMS.Func_Script;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

import com.google.common.base.Strings;

public class File_Merger {
	
	public String file_merge(String[] vals) throws IOException {
       String temp=null;
		
		String[] val=vals;
		
		int len=val.length-1;
		File Merger1;
		File Merger2;
		File Result;
		int k=0;
		for(int i=0;i<len;i++) {
			
			if(Strings.isNullOrEmpty(temp)) {
				
				temp="C:\\CVS_Finance_Script\\Results\\HR_HUB_06_12_2019_01_53\\Download\\Final_"+i+".txt";
				Merger1=new File(val[k]);
				k++;
				Merger2=new File(val[k]);
				k++;
				Result=new File(temp);
				mergeFiles(Result,Merger1,Merger2);
			}
			
			else {
				
				Merger1=new File(temp);
				Merger2=new File(val[k]);
				k++;
				temp="C:\\CVS_Finance_Script\\Results\\HR_HUB_06_12_2019_01_53\\Download\\Final_"+i+".txt";
				Result=new File(temp);
				mergeFiles(Result,Merger1,Merger2);
				
			}
			
		}
		
		System.out.println(temp);
		
		return temp;
	}
	
	
	
	private static final void transfer(final Reader source, final Writer destination) throws IOException {
	    char[] buffer = new char[1024 * 16];
	    int len = 0;
	    while ((len = source.read(buffer)) >= 0) {
	        destination.write(buffer, 0, len);
	    }
	}

	public static void mergeFiles(final File output, final File inputfile1, final File inputfile2) 
	             throws IOException{

	    try (
	        Reader sourceA = Files.newBufferedReader(inputfile1.toPath());
	        Reader sourceB = Files.newBufferedReader(inputfile2.toPath());
	        Writer destination = Files.newBufferedWriter(output.toPath(), StandardCharsets.UTF_8); ) {

	        transfer(sourceA, destination);
	        transfer(sourceB, destination);

	    }
	}


}
