package com.hive.utilities;

import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import javax.imageio.ImageIO;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;

import com.google.common.base.Strings;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class General_Wrapper extends Support1 {
	
	public static  String driverName = "org.apache.hive.jdbc.HiveDriver";
    public static  Connection con;
    public static  Statement stmt;
    public ResultSet res1,res2, res3,res4, res5,res6, res7,res8, res9,res10;
    
    public static WebDriver driver;
    public static Logger logger ;
    public static FileHandler fh;
    
    public static String Result_File;
    public static String[][] mydata;
    
    public static String[] Temp_Src_Query,Temp_Tgt_Query;
    public static  String Username,pwd,Excel_Path,Result_Path,Add_Key,Sheet_Name,Src_Query,Tgt_Query,Key_Column,Target_TB,Target_Table_Name;
    
    public static  boolean Overall_Result=true;
    public static  boolean TP_Status=false;
    public static int[] Keyvalue_Column;
    
    public static  HashSet<String> Mismatch_data = new HashSet<String>(); 
	public static  HashSet<String> Tgt_data = new HashSet<String>(); 
	
    public static HashMap<Integer, Integer> Data_Index =new HashMap<Integer, Integer>();
	public static  HashMap<Integer, Long> Column_Mismatch =new HashMap<Integer, Long>();
	public static  HashMap<Integer, String> Table_column =new HashMap<Integer, String>();
    
    
	public static ExtentTest test;
	public ExtentReports extent;
	public static String testCaseName;
	public static String testDescription;
	public static String category;
	public static String authors;
	public static String Job_ID,Mainframe_Status;

    public static String[] Temp_Value;
    public static String Source_Missing="Source Missing";
    public static String Target_Missing="Target Missing";
    public static String Count_Report="Count Summary";
    public static String Source_Duplicate="Source Duplicate";
    public static String Target_Duplicate="Target Duplicate";
    public static String Data_Mismatch="Data Mismatch";
    public static String Summary="Summary";
    public static boolean Source_Missing_Flag=false;
    public static boolean Target_Missing_Flag=false;
    public static boolean Source_Duplicate_Flag=false;
    public static boolean Target_Duplicate_Flag=false;
    public static boolean Data_Mismatch_Flag=false;
    public static boolean Count_Mismatch_Flag=false;
    public static String[] Src_Column_Name,Tgt_Column_Name;
    public static int Src_Column_Count,Tgt_Column_Count;

    public static long Total_Src_Count,Total_Tgt_Count,Src_Missing_Count,Tgt_Missing_Count,Src_duplicate_count,Tgt_duplicate_count,Data_Mismatch_Count;
    
    public static String Data_Src_txt="",Data_Tgt_txt="";
    public static  SimpleFormatter formatter;
    public static  SimpleDateFormat formatter1;
    
   
    
    
   public static void Hive_HDBC() throws ClassNotFoundException, SQLException{
	   Class.forName(driverName);
	   con = DriverManager.getConnection("jdbc:hive2://hiveldap.aetna.com:10000/default;AuthMech=3;",Username,pwd);
	   System.out.println("Connection Success");
	   stmt = con.createStatement();
	   logger.info("* HIVE Connection Success  *");
    	
    }
   
   public static void Hive_HDBC_Close() throws ClassNotFoundException, SQLException{
	   con.close();
    	
    }
   
  
   
   public boolean File_Exists(String Path){
		 
		 File files1 = new File(Path);
	     if (files1.exists()) {
	        return true;
	         } else {
	            return false;
	         }
	     
		 
	 }
   
   public ExtentReports startResult(){
		try{
			SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy_hh_mm_ss");
			String PP = "Result_"+sdf.format(new Date())+".html";  
			extent = new ExtentReports(Result_Path+PP, true);
			extent.loadConfig(new File("extent-config.xml"));
		}catch(Exception e){
			System.out.println("exception throwed in startResult method");
		}
		
		return extent;
		
	}

	public ExtentTest startTestCase(String testCaseName, String testDescription){
		try{
			test = extent.startTest(testCaseName, testDescription);
		}catch(Exception e){
			System.out.println("Exception throwd in startTestCase method");
		}
		return test;
	}

	public void endResult(){
		try{
			extent.flush();
			System.out.println("result has been saved");
		}
		catch(Exception e){
			System.out.println("Exception throwed while endResult method");
		}
		
	}

	public void endTestcase(){
		try{
			
			
			
			extent.endTest(test);
			
			
			
			
		}catch(Exception e){
			System.out.println("Exception throwed while endTestcae method");
		}
		
	}
	
	public static String[][] readXLSX(String Filepath,String Sheet) throws IOException{
		File excel=new File(Filepath);
		FileInputStream fis=new FileInputStream(excel);
		String Value=null;
		XSSFWorkbook book=new XSSFWorkbook(fis);
		XSSFSheet ws=book.getSheet(Sheet);
		XSSFCell cell;
		
		DataFormatter format=new DataFormatter();
		int rowNum=ws.getLastRowNum()+1;
		int colNum=ws.getRow(0).getLastCellNum();
		
		String[][] Parameter=new String[(colNum)][(rowNum)];
		for(int i=0;i<rowNum;i++){
			XSSFRow row=ws.getRow(i);
			for(int j=0;j<colNum;j++){
				
				cell=row.getCell(j);
				if(!(cell==null)){
					Value=format.formatCellValue(cell);
				}
				else{
					Value=null;
				}
				Parameter[j][i]=Value;
			}
			
		}
		book.close();
		return Parameter;
		
	}
	
	public static boolean isStringEmpty(String input){
        if(input.trim().length() == 0){
            return true;
        }
        return false;
    }
	
	public static boolean isStringNull(String input){
	
        if(input == null ){
            return true;
        }
        return false;
    }
	
public static void Create_Sheet(String Filepath,String Sheet) throws IOException{
 		
 		FileInputStream fis=new FileInputStream(Filepath);
 		XSSFWorkbook book=new XSSFWorkbook(fis);
 		XSSFSheet ws=book.createSheet(Sheet);
 		
 		if(Sheet.equalsIgnoreCase("Summary")){
 			book.setSheetOrder("Summary", 0);
 		}
 		fis.close();
 		FileOutputStream fo=new FileOutputStream(Filepath);
 		book.write(fo);
 		book.close();
 		fo.flush();
 		fo.close();
 		
 	}

public static void Create_workbook_Sheets() throws IOException{
	  
    Create_Book(Result_File);
	Create_Sheet(Result_File,Count_Report);
	Create_Sheet(Result_File,Source_Duplicate);
	Create_Sheet(Result_File,Target_Duplicate);
	Create_Sheet(Result_File,Source_Missing);
	Create_Sheet(Result_File,Target_Missing);
	Create_Sheet(Result_File,Data_Mismatch);
	Create_Sheet(Result_File,Summary);
  
  
}
 	

 	
 public static String Create_Book(String Filepath) throws IOException{
 	
 		String FP=Filepath;
 		XSSFWorkbook workbook = new XSSFWorkbook();
 	    FileOutputStream out = new FileOutputStream(new File(FP));
 	      workbook.write(out);
 	      out.close();
 	      return FP;
 			
 		}



public static String writeBody_H(String Filepath,String Sheet,String Value,int col,int row,int St) throws IOException{
 	String val=Value;
 	String main=Sheet;
 	FileInputStream fis=new FileInputStream(Filepath);
 	XSSFWorkbook book=new XSSFWorkbook(fis);
 	XSSFSheet ws=book.getSheet(main);
 	ws.autoSizeColumn(col);
 	XSSFCellStyle lock=book.createCellStyle();
 
 	  lock.setAlignment(HorizontalAlignment.LEFT);
     XSSFFont font= book.createFont();
     font.setFontHeightInPoints((short)10);
     font.setFontName("Verdana");
     font.setColor(IndexedColors.BLACK.getIndex());
     font.setBold(true);
     font.setItalic(false);
     lock.setFont(font);
     lock.setBorderTop(BorderStyle.MEDIUM);
     lock.setBorderRight(BorderStyle.MEDIUM);
     lock.setBorderBottom(BorderStyle.MEDIUM);
     lock.setBorderLeft(BorderStyle.MEDIUM);
   
 	if(St==1){
 		XSSFRow rr=ws.createRow(row);
 		XSSFCell cell=rr.createCell(col);
 		cell.setCellValue(Value);
 		cell.setCellStyle(lock);
 		
 	}
 	else{
 		
 		XSSFRow rr=ws.getRow(row);
 		XSSFCell cell=rr.createCell(col);
 		cell.setCellValue(Value);
 		cell.setCellStyle(lock);//
 		
 	}
 	
 
 	fis.close();
 	FileOutputStream fo=new FileOutputStream(Filepath);
 	book.write(fo);
 	book.close();
 	fo.flush();
 	fo.close();
 	return val;
 }

public void reportStep_only(String desc, String status) {
	

	if(status.toUpperCase().equals("PASS")){
		 
		test.log(LogStatus.PASS, desc);
	}else if(status.toUpperCase().equals("FAIL")){
		test.log(LogStatus.FAIL, desc);
		
	}else if(status.toUpperCase().equals("INFO")){
		test.log(LogStatus.INFO, desc);
	}



}

public void Key_Value_Split() {
	
	 String[] Keyvalue_Split=Key_Column.split(",");
	  Keyvalue_Column=new int[Keyvalue_Split.length];
	  for(int x=0;x<Keyvalue_Split.length;x++){
	    	
	    	Keyvalue_Column[x]=Integer.parseInt(Keyvalue_Split[x])-1;

	    	
	    }
	 
	
}


public static boolean Key_Column_identifier(int i) {
	
	 boolean test = false; 
   for (int element : Keyvalue_Column) { 
       if (element == i) { 
           test = true; 
           break; 
       } 
   }
   
   if(test) {
  	 return true;
  	
   }
   else
  	 return false;
	
}

public void Count_Validation() throws SQLException, IOException{
	
	try{
		
	
	System.out.println("Count Validation Begins");
	System.out.println("------------------------");
	logger.info("********Count Validation Begins************");
	
	String SRC_Query="Select count (*) from ("+ Src_Query+" ) src";
	String TGT_Query="Select count (*) from ("+ Tgt_Query+" ) src";
	logger.info("Src Query - "+SRC_Query);
	logger.info("Src Query - "+TGT_Query);
	String SC=null;
	String TC=null;
	
	res1 = stmt.executeQuery(SRC_Query);
	System.out.println("Count Validation Processing........");

		
		while(res1.next())
		{
			
			SC=res1.getString(1);
			Total_Src_Count=Long.parseLong(SC);
			
			
		}
	
		reportStep_only("Source Count : "+Total_Src_Count,"INFO");
		res2 = stmt.executeQuery(TGT_Query);
		
		while(res2.next())
		{
			
			TC=res2.getString(1);
			Total_Tgt_Count=Long.parseLong(TC);
			
		}
		reportStep_only("Target Count : "+Total_Tgt_Count,"INFO");
	
		if(SC.equalsIgnoreCase(TC)){
		
			reportStep_only("Count_Validation Result","PASS");
			
		}
		else{
			
			Count_Mismatch_Flag=true;
			
			reportStep_only("Count_Validation Result","FAIL");
			
		}
		
		System.out.println("Count Validation Ends");
		System.out.println("------------------------");
		logger.info("********Count Validation Ends************");
		
		
}catch(SQLException se){
	
	writeBody_H(Result_File,Count_Report,"Error Occured will processing",0,2,1);
	writeBody_H(Result_File,Count_Report,se.getMessage(),1,2,0);
   
   
 }catch(Exception e){
	 
	 writeBody_H(Result_File,Count_Report,"Error Occured will processing",0,2,1);
	 writeBody_H(Result_File,Count_Report,e.getMessage(),1,2,0);
 }
	
}


public void Data_Validation() throws SQLException, IOException{
	
	
	try{
	System.out.println("Data Validation Begins");
	System.out.println("------------------------");
	logger.info("********Data Validation Begins************");
	ArrayList<String> data_write = new ArrayList<String>();
    String FinalSP="";

	for (int i=0;i<Src_Column_Name.length;i++){
		
	    if(Key_Column_identifier(i)) {
		if(FinalSP.length()==0){
			FinalSP =FinalSP.concat("SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim()+" ");
		}
		else{
			FinalSP =FinalSP.concat(" and SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim());
		}
		
	}
	}
	
	 String FinalSU="";
		for (int i=0;i<Src_Column_Name.length;i++){
			
			
			 if(!(Key_Column_identifier(i))) {
				 
				
			if(FinalSU.length()==0){
				FinalSU =FinalSU.concat("SRC."+Src_Column_Name[i].trim()+" <> TGT."+Tgt_Column_Name[i].trim()+" ");
			}
			else{
				FinalSU =FinalSU.concat(" or SRC."+Src_Column_Name[i].trim()+" <> TGT."+Tgt_Column_Name[i].trim());
			}
			
		}
		}
		
		String Query;
		
		if(FinalSU.length()==0){
			Query="select * from ("+Src_Query+")SRC left outer join ("+Tgt_Query+")TGT on "+FinalSP;
			
		}
		else{
	       Query="select * from ("+Src_Query+")SRC left outer join ("+Tgt_Query+")TGT on "+FinalSP+" where "+FinalSU;
		}
	 logger.info("Query - "+Query);
	
	 System.out.println("Data Validation Processing.......");
	

	 
	 res3 = stmt.executeQuery(Query);
	 ResultSetMetaData rsmd=res3.getMetaData();

	 int Columncount = rsmd.getColumnCount()/2;
	 
	long count=0;
	while(res3.next())
	{
		
		String Value="";
		
		boolean Flag=false;
		boolean Flag1=false;
	    for(int jj=0;jj<Columncount;jj++){
	    	

			 String a=res3.getString(jj+1); 
			 String b=res3.getString(jj+1+Columncount); 
			 String v="";
			 String r="";
			 
			 if(Strings.isNullOrEmpty(a)) {
				 v="";
			 }
			 else {
				 v=a.trim();
			 }
			 
			 if(Strings.isNullOrEmpty(b)) {
				 r="";
			 }
			 else {
				 r=b.trim();
			 }
			 
			 
			 
			 if(!(v.equalsIgnoreCase(r))) {
				 
				 Flag1=true;
				 
                 Column_Mismatch.put(jj, (Column_Mismatch.get(jj))+1);
				 
				 if(Column_Mismatch.get(jj)<=5) {
					 Flag=true; 
				 }
				 
			 if(Value.length()==0) {
				
				
					 Value=Value+v+" | "+r+" | MisMatch";
				
				 
			 }
			 else {
				 
				
					 Value=Value+" | "+v+" | "+r+" | MisMatch";
				  
				 
			 }
			 }
			 
			 else {
				 
				 
				 if(Value.length()==0) {
					
					
						 Value=Value+v+" | "+r+" | Match";
					 
					 
				 }
				 else {
					 
					
						 Value=Value+" | "+v+" | "+r+" | Match";
					 
					 
				 }
				 
				 
				 
			 }
				 	 
		 }
	    
	    if(Flag) {
	    
	    	data_write.add(Value);
    
	   }
	    
	    if(Flag1) {
		    
	    	count++;
    
	   }
		}
	   

	Data_Mismatch_Count=count;
	reportStep_only("Total Data Mismatch record Count : "+Data_Mismatch_Count,"INFO");
	
	if(Data_Mismatch_Count>0) {
		Data_Mismatch_Flag=true;
	}
	int gg=0;
	
	  for(int g=0;g<Tgt_Column_Name.length;g++) {
		  
		       
		       if(g==0) {

			   writeBody_H(Result_File,Data_Mismatch,Tgt_Column_Name[g]+"_Target",gg,0,1);
			   gg++;
		       }
		       else {
		    	   writeBody_H(Result_File,Data_Mismatch,Tgt_Column_Name[g]+"_Target",gg,0,0);
				   gg++;  
		       }
			   writeBody_H(Result_File,Data_Mismatch,Src_Column_Name[g]+"_Source",gg,0,0);
			   gg++;
			   writeBody_H(Result_File,Data_Mismatch,Tgt_Column_Name[g]+"_Status",gg,0,0);
			   gg++;
			   
			   
		   
		   
		}
	
	   Data_validation_Bulk_Writer(Result_File,Data_Mismatch,data_write);
	
	System.out.println("Data Validation Ends");
	System.out.println("------------------------");
	logger.info("********Data Validation Ends************");
  	
     reportStep_only("Column wise Data Mismatch count","INFO");
	
	for(int i=0;i<Column_Mismatch.size();i++){
		
		reportStep_only(Table_column.get(i)+"  :  "+Column_Mismatch.get(i),"INFO");
		
	}

	
	}catch(SQLException se){
		
		writeBody_H(Result_File,Data_Mismatch,"Error Occured will processing",0,2,1);
		writeBody_H(Result_File,Data_Mismatch,se.getMessage(),1,2,0);
	   
	   
	 }
	
}






	
	public void SRC_Missing() throws SQLException, IOException{
		
		try{
		
		System.out.println("SOURCE Missing Validation Begins");
		System.out.println("------------------------");
		logger.info("********SOURCE Missing Validation Begins************");
		String FinalSP="";
		String FinalSU="";
		ArrayList<String> record_Source = new ArrayList<String>();


		for (int i=0;i<Src_Column_Name.length;i++){
			
			 if(Key_Column_identifier(i)) {
				 
				 if(FinalSP.length()==0){
						FinalSP =FinalSP.concat("SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim()+" ");
					}
					else{
						FinalSP =FinalSP.concat(" and SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim());
					}
		
			
		}
		}
		
	
			for (int i=0;i<Src_Column_Name.length;i++){
				
				 if(Key_Column_identifier(i)) {
				if(FinalSU.length()==0){
					FinalSU =FinalSU.concat(" SRC."+Src_Column_Name[i].trim()+" is null ");
				}
				else{
					FinalSU =FinalSU.concat(" and  SRC."+Src_Column_Name[i].trim()+" is null");
				}
				
			}
			}
		
			String Query;	
		
		 Query="select * from ("+Src_Query+")SRC right join ("+Tgt_Query+")TGT on "+FinalSP+" where "+FinalSU;
		 logger.info("Query - "+Query);
		
		 System.out.println("SOURCE Missing Validation Processing.................");
		
		 res4 = stmt.executeQuery(Query);
		 ResultSetMetaData rsmd=res4.getMetaData();
	
		 int Columncount = rsmd.getColumnCount()/2;
		 long Count = 0;
	
		while(res4.next())
		{
			Count++;
			
			if(Count<=20) {
				
				 String key_val="";
		    for(int jj=0;jj<Columncount;jj++){
		    	String v=res4.getString(jj+Columncount+1); 
				 if(key_val.length()==0) {
					
					 if (res4.wasNull()) {
						  key_val=key_val+"";
					  }
					  else {
						  key_val=key_val+v.trim();
					  }
					 
				 }
				 else {
					 
					 if (res4.wasNull()) {
						  key_val=key_val+" | "+"";
					  }
					  else {
						  key_val=key_val+" | "+v.trim();
					  }
					 
				 }
		    	
				
			}
		    
		    System.out.println(key_val);
		    
		    record_Source.add(key_val);
		}
		   
		}
		
	
		
		 Src_Missing_Count=Count;
		 
		 reportStep_only("Total Source Missing record Count : "+Src_Missing_Count,"INFO");
		
		 if(Src_Missing_Count>0) {
			 Source_Missing_Flag=true;
			}
		if(Count==0) {
		reportStep_only("SOURCE MISSING VALIDATION ","PASS");
		}
		else {
			reportStep_only("SOURCE MISSING VALIDATION ","FAIL");
		}
		
		for(int g=0;g<Src_Column_Name.length;g++) {
			
			if(g==0) {

				  writeBody_H(Result_File,Source_Missing,Src_Column_Name[g],g,0,1);
			       }
			       else {
			    	   writeBody_H(Result_File,Source_Missing,Src_Column_Name[g],g,0,0); 
			       }
			

			 
			  
		   
		}
		
		Missing_Record_Bulk_Writer(Result_File,Source_Missing,record_Source);
		
		System.out.println("SOURCE Missing Validation Ends");
		System.out.println("-------------------------------"); 
		logger.info("********SOURCE Missing Validation Ends************");
		
		
		}catch(SQLException se){
			
			writeBody_H(Result_File,Source_Missing,"Error Occured will processing",0,2,1);
			writeBody_H(Result_File,Source_Missing,se.getMessage(),1,2,0);
		   
		   
		 }
	}
	
	
	public void TGT_Missing() throws SQLException, IOException{
		
		try{
		
		System.out.println("Target Missing Validation Begins");
		System.out.println("----------------------------------");
		logger.info("********TARGET Missing Validation Begins************");

		String FinalSP="";
		String FinalSU="";
		ArrayList<String> record_Target = new ArrayList<String>();


		for (int i=0;i<Tgt_Column_Name.length;i++){
			
			 if(Key_Column_identifier(i)) {
				 
				 if(FinalSP.length()==0){
				FinalSP =FinalSP.concat("SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim()+" ");
			}
			else{
				FinalSP =FinalSP.concat(" and SRC."+Src_Column_Name[i].trim()+" = TGT."+Tgt_Column_Name[i].trim());
			}
			
		}
		}
		
	
		for (int i=0;i<Tgt_Column_Name.length;i++){
			
			 if(Key_Column_identifier(i)) {
			if(FinalSU.length()==0){
					FinalSU =FinalSU.concat(" TGT."+Tgt_Column_Name[i].trim()+" is null ");
				}
				else{
					FinalSU =FinalSU.concat(" and  TGT."+Tgt_Column_Name[i].trim()+" is null");
				}
				
			}
			}
			
	
		 String Query="select * from ("+Src_Query+")SRC left join ("+Tgt_Query+")TGT on "+FinalSP+" where "+FinalSU;
		 logger.info("Query - "+Query);
		
		 System.out.println("TARGET Missing Validation Processing.................");
		
		 res5 = stmt.executeQuery(Query);
		 ResultSetMetaData rsmd=res5.getMetaData();
		 int Columncount = rsmd.getColumnCount()/2;
		 long Count = 0;
		
		
		while(res5.next())
		{
			Count++;
			
			if(Count<=20) {
				
				 String key_val="";
		     for(int jj=0;jj<Columncount;jj++){
		    	String v=res5.getString(jj+1); 
				 if(key_val.length()==0) {
					
					 if (res5.wasNull()) {
						  key_val=key_val+"";
					  }
					  else {
						  key_val=key_val+v.trim();
					  }
					 
				 }
				 else {
					 
					 if (res5.wasNull()) {
						  key_val=key_val+" | "+"";
					  }
					  else {
						  key_val=key_val+" | "+v.trim();
					  }
					 
				 }
		    	
				
			}
		    
		    record_Target.add(key_val);
		}
		   
		}
		
		
		
		 Tgt_Missing_Count=Count;
		 reportStep_only("Total Target Missing record Count : "+Tgt_Missing_Count,"INFO");
		 if(Tgt_Missing_Count>0) {
			 Target_Missing_Flag=true;
			}
			
		if(Count==0) {
		reportStep_only("Target MISSING VALIDATION","PASS");
		}
		else {
			reportStep_only("Target MISSING VALIDATION","FAIL");
		}
		
		for(int g=0;g<Tgt_Column_Name.length;g++) {
			
			if(g==0) {

				 writeBody_H(Result_File,Target_Missing,Tgt_Column_Name[g],g,0,1);
			       }
			       else {
			    	   writeBody_H(Result_File,Target_Missing,Tgt_Column_Name[g],g,0,0);
			       }
			

			  
			  
		   
		}
		
		Missing_Record_Bulk_Writer(Result_File,Target_Missing,record_Target);
		System.out.println("Target Missing Validation Ends");
		System.out.println("----------------------------------"); 
		logger.info("********TARGET Missing Validation Ends************");
		
		
		}catch(SQLException se){
			
			writeBody_H(Result_File,Target_Missing,"Error Occured will processing",0,2,1);
			writeBody_H(Result_File,Target_Missing,se.getMessage(),1,2,0);
		   
		   
		 }
		
	}

	public void TGT_Duplicate() throws SQLException, IOException{
		
		
		try{
		System.out.println("Target Duplicate Validation Begins");
		System.out.println("----------------------------------");
		logger.info("********Target Duplicate Validation Begins************");
		ArrayList<String> record = new ArrayList<String>();
		String Finalquery=Tgt_Query;
		String[] Finalquery1=Finalquery.split("from");
		String[] FinalData = null;
		String FinalData1 = "";
		String ss1=Finalquery1[0].replace("select", "");
		
		FinalData=Tgt_Column_Name;
	
		for(int gg=0;gg<FinalData.length;gg++){
			
			
			if(gg==FinalData.length-1){
				FinalData1=FinalData1.concat(FinalData[gg]+"  ");
			}
			else{
			FinalData1=FinalData1.concat(FinalData[gg]+" ,");
			}
		}
		
		
		 String Query="select "+FinalData1+" ,count(*) from ( "+Finalquery+" ) ss group by "+FinalData1+" having count(*)>1";
		 logger.info("Query - "+Query);
		
		 System.out.println("Target Duplicate Validation Processing.........");	
		
		 res6 = stmt.executeQuery(Query);
		 ResultSetMetaData rsmd=res6.getMetaData();
		
		 long Count = 0;	
		while(res6.next())
		{
		  
                      Count++;
			
				 String key_val="";
		     for(int jj=0;jj<Tgt_Column_Name.length;jj++){
		    	String v=res6.getString(jj+1); 
				 if(key_val.length()==0) {
					
					 if (res6.wasNull()) {
						  key_val=key_val+"";
					  }
					  else {
						  key_val=key_val+v.trim();
					  }
					 
				 }
				 else {
					 
					 if (res6.wasNull()) {
						  key_val=key_val+" | "+"";
					  }
					  else {
						  key_val=key_val+" | "+v.trim();
					  }
					 
				 }
		    	
				
			}
		    
		    record.add(key_val);
		   
		}
		
		Tgt_duplicate_count=Count;
		
		reportStep_only("Total Target Duplicate record Count : "+Tgt_duplicate_count,"INFO");
		
		 if(Tgt_duplicate_count>0) {
			 Target_Duplicate_Flag=true;
			}
		
		if(Tgt_duplicate_count==0) {
			reportStep_only("TARGET Duplicate VALIDATION ","PASS");
			}
			else {
				reportStep_only("TARGET Duplicate VALIDATION ","FAIL");
			}
		
		
		for(int g=0;g<Tgt_Column_Name.length;g++) {
			
			if(g==0) {

				  writeBody_H(Result_File,Target_Duplicate,Tgt_Column_Name[g],g,0,1);
			       }
			       else {
			    	   writeBody_H(Result_File,Target_Duplicate,Tgt_Column_Name[g],g,0,0);
			       }
			
			

			 
			  
		   
		}
		
		Duplicate_Bulk_Writer(Result_File,Target_Duplicate,record);
		
		
		
		System.out.println("Target Duplicate Validation Ends");
		System.out.println("----------------------------------");
		logger.info("********Target Duplicate Validation Ends************");
		
		}catch(SQLException se){
			
			writeBody_H(Result_File,Target_Duplicate,"Error Occured will processing",0,2,1);
			writeBody_H(Result_File,Target_Duplicate,se.getMessage(),1,2,0);
		   
		   
		 }
	}
	
public void SRC_Duplicate() throws SQLException, IOException{
		
		
		try{
		System.out.println("Source Duplicate Validation Begins");
		System.out.println("----------------------------------");
		logger.info("********Source Duplicate Validation Begins************");
		ArrayList<String> record = new ArrayList<String>();
		String Finalquery=Src_Query;
		String[] Finalquery1=Finalquery.split("from");
		String[] FinalData = null;
		String FinalData1 = "";
		String ss1=Finalquery1[0].replace("select", "");
		
		FinalData=Src_Column_Name;
	
		for(int gg=0;gg<FinalData.length;gg++){
			
			
			if(gg==FinalData.length-1){
				FinalData1=FinalData1.concat(FinalData[gg]+"  ");
			}
			else{
			FinalData1=FinalData1.concat(FinalData[gg]+" ,");
			}
		}
		
		
		 String Query="select "+FinalData1+" ,count(*) from ( "+Finalquery+" ) bb group by "+FinalData1+" having count(*)>1";
		 logger.info("Query - "+Query);
		
		 System.out.println("Source Duplicate Validation Processing.........");	
		
		 res7 = stmt.executeQuery(Query);
		
		 long Count = 0;	
		while(res7.next())
		{
		  
                      Count++;
			
				 String key_val="";
		     for(int jj=0;jj<Src_Column_Name.length;jj++){
		    	String v=res7.getString(jj+1); 
				 if(key_val.length()==0) {
					
					 if (res7.wasNull()) {
						  key_val=key_val+"";
					  }
					  else {
						  key_val=key_val+v.trim();
					  }
					 
				 }
				 else {
					 
					 if (res7.wasNull()) {
						  key_val=key_val+" | "+"";
					  }
					  else {
						  key_val=key_val+" | "+v.trim();
					  }
					 
				 }
		    	
				
			}
		    
		    record.add(key_val);
		   
		}
		
		Src_duplicate_count=Count;
		
		reportStep_only("Total Source Duplicate record Count : "+Src_duplicate_count,"INFO");
		 if(Src_duplicate_count>0) {
			 Source_Duplicate_Flag=true;
			}
		
		if(Src_duplicate_count==0) {
			reportStep_only("SOURCE Duplicate VALIDATION","PASS");
			}
			else {
				reportStep_only("SOURCE Duplicate VALIDATION","FAIL");
			}
		
		
		for(int g=0;g<Src_Column_Name.length;g++) {
			if(g==0) {

				   writeBody_H(Result_File,Source_Duplicate,Src_Column_Name[g],g,0,1);
			       }
			       else {
			    	   writeBody_H(Result_File,Source_Duplicate,Src_Column_Name[g],g,0,0);
			       }
			

			
			  
		   
		}
		
		Duplicate_Bulk_Writer(Result_File,Source_Duplicate,record);
		
		
		
		System.out.println("Source Duplicate Validation Ends");
		System.out.println("----------------------------------");
		logger.info("********Source Duplicate Validation Ends************");
		
		}catch(SQLException se){
			
			writeBody_H(Result_File,Source_Duplicate,"Error Occured will processing",0,2,1);
			writeBody_H(Result_File,Source_Duplicate,se.getMessage(),1,2,0);
		   
		   
		 }
} 


public static void Count_Report() throws IOException{
	 
   Count_Write(Result_File,Count_Report);
 
 

}

public void Summary_sheet() throws IOException{	
	
	Summary_Write(Result_File,Summary);
	
	
	
	
	
}


public static String writeBody(String Filepath,String Sheet,String Value,int col,int row,int St) throws IOException{
 	String val=Value;
 	String main=Sheet;
 	FileInputStream fis=new FileInputStream(Filepath);
 	XSSFWorkbook book=new XSSFWorkbook(fis);
 	XSSFSheet ws=book.getSheet(main);
 	ws.autoSizeColumn(col);
 	XSSFCellStyle lock=book.createCellStyle();
 	  lock.setAlignment(HorizontalAlignment.LEFT);
    // lock.setWrapText(true);
     //lock.setLocked(true);
     XSSFFont font= book.createFont();
     font.setFontHeightInPoints((short)10);
     font.setFontName("Verdana");
     font.setColor(IndexedColors.BLACK.getIndex());
     font.setBold(false);
     font.setItalic(false);
     lock.setFont(font);
     lock.setBorderTop(BorderStyle.MEDIUM);
     lock.setBorderRight(BorderStyle.MEDIUM);
     lock.setBorderBottom(BorderStyle.MEDIUM);
     lock.setBorderLeft(BorderStyle.MEDIUM);
 	if(St==1){
 		XSSFRow rr=ws.createRow(row);
 		XSSFCell cell=rr.createCell(col);
 		
 		cell.setCellValue(Value);
 		cell.setCellStyle(lock);
 		
 	
 	}
 	else{
 		
 		XSSFRow rr=ws.getRow(row);
 		XSSFCell cell=rr.createCell(col);
 		cell.setCellValue(Value);
 		cell.setCellStyle(lock);
 	}
 	
 	//ws.protectSheet("Password1");
 	fis.close();
 	FileOutputStream fo=new FileOutputStream(Filepath);
 	book.write(fo);
 	book.close();
 	fo.flush();
 	fo.close();
 	return val;
 }

public void Mainframe_exe() throws Exception {
	Process p = Runtime.getRuntime().exec("cmd.exe /c start C:\\Rumba\\Desktops\\A-Window.rdps");
	Thread.sleep(10000);
	Copy("log tso84,,"+Username);
	Enter();		
	Copy(pwd);	
	Enter();	
	Thread.sleep(15000);		
	Enter();
	Copy("zeketest;ze;5");
	Enter();	
		
		PressTAB(1);
	Copy("*");
	PressTAB(1);
	Copy("1ku");
	PressTAB(3);
	Copy("2");
	Enter();
	
	Thread.sleep(5000);
	for(int i=1;i<=8;i++){
		PressTAB(i+1);
		Copy("c");
		Enter();
		Thread.sleep(2000);
		BufferedImage subimage_Active = ImageIO.read(new File("./Image/New_Value.png"));
		 BufferedImage Main_image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
		 boolean flag=true;
		 
		 if(match(subimage_Active, Main_image) != null) {
			break;
		 }
		 
		
	}
	
	PressDEL(5);	
	Copy(Job_ID);
	Enter();
	PressDEL(4);				
										
	Copy("run");
	Enter();
	Copy("complete");
	Enter();
	
	Thread.sleep(3000);
	Copy("start zeketest;ze;2");
	Enter();
	PressTAB(4);
	Copy(Job_ID);
	Enter();
	validation();
	f3(10);
	Copy("3");
	Enter();
	Copy("bye");
	Enter();
	Thread.sleep(8000);
	Kill_Bat();
}
 
 

}
